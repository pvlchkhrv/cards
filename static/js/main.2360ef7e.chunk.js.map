{"version":3,"sources":["c1-main/m1-ui/common/input/InputText.module.css","c1-main/m1-ui/common/button/Button.module.css","c1-main/m1-ui/common/checkbox/Checkbox.module.css","c1-main/m1-ui/header/Header.module.css","c1-main/m1-ui/profile/Profile.tsx","c1-main/m1-ui/404/Error404.tsx","c1-main/m1-ui/new-password/NewPassword.tsx","c1-main/m1-ui/test/Test.tsx","c1-main/m3-dall/instance.ts","c1-main/m2-bll/register-reducer.ts","c1-main/m1-ui/registration/Register.tsx","c1-main/m1-ui/registration/RegisterContainer.tsx","c1-main/m1-ui/registration/RegisterPage.tsx","c1-main/m1-ui/common/input/InputText.tsx","c1-main/m1-ui/common/checkbox/Checkbox.tsx","c1-main/m1-ui/common/button/Button.tsx","c1-main/m1-ui/login/Login.tsx","c1-main/m3-dal/LoginAPI.tsx","c1-main/m2-bll/login-reducer.ts","c1-main/m1-ui/login/LoginContainer.tsx","c1-main/m3-dal/restoreAPI.ts","c1-main/m2-bll/app-reducer.ts","c1-main/m2-bll/restore-password-reducer.ts","c1-main/m1-ui/restore-password/RestorePasswordForm.tsx","c1-main/m1-ui/restore-password/RestorePassword.tsx","c1-main/m1-ui/restore-password/RestorePasswordContainer.tsx","c1-main/m1-ui/restore-password/RestorePasswordPage.tsx","c1-main/m1-ui/Routes.tsx","c1-main/m1-ui/header/Header.tsx","c1-main/m1-ui/App.tsx","reportWebVitals.ts","c1-main/m2-bll/profile-reducer.ts","c1-main/m2-bll/new-password-reducer.ts","c1-main/m2-bll/test-reducer.ts","c1-main/m2-bll/store.ts","index.tsx"],"names":["module","exports","Profile","Error404","NewPassword","Test","instance","axios","create","baseURL","withCredentials","authAPI","email","password","post","IS_REGISTER","IS_ERROR_MESSAGE","setIsRegister","value","type","initialState","isRegister","isErrorMessage","registerReducer","state","action","Register","onClick","onChangeMail","onChangePassword","mail","placeholder","onChange","to","PATH","LOGIN","RegisterContainer","console","log","useSelector","register","dispatch","useDispatch","useState","setMail","setPassword","a","response","data","error","registrationThunk","e","currentTarget","RegisterPage","InputText","onChangeText","onKeyPress","onEnter","spanClassName","className","restProps","finalSpanClassName","s","finalInputClassName","input","errorInput","superInput","key","Checkbox","onChangeChecked","children","checkbox","checked","Button","red","finalClassName","button","default","Login","onChangeEmail","inctance","rememberMe","SET_USER_DATA","user","isAuth","getAuthUserData","then","res","payload","catch","message","LoginContainer","props","login","setEmail","setRememberMe","PROFILE","restorePasswordAPI","from","status","isError","setAppError","setAppStatus","SET_SUCCESS_MESSAGE","SET_ERROR_MESSAGE","SET_IS_REGISTERED","isRegistered","successMessage","errorMessage","setIsRegistered","restorePasswordTC","info","RestorePasswordForm","onSubmit","RestorePassword","appStatus","RestorePasswordContainer","app","restorePassword","SET_NEW_PASSWORD","RestorePasswordPage","REGISTER","ERROR","RESTORE_PASSWORD","TEST","Routes","exact","path","render","Header","headerContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","profile","newPassword","test","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.2360ef7e.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"InputText_superInput__2h3wO\",\"errorInput\":\"InputText_errorInput__3F9WG\",\"error\":\"InputText_error__2lDLV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3_qLI\",\"red\":\"Button_red__3mhUf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__VqnP0\",\"spanClassName\":\"Checkbox_spanClassName__13gmc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__2kMJy\"};","import React from 'react';\r\n\r\nconst Profile: React.FC = () => {\r\n    return (\r\n        <div>\r\n            PROFILE PAGE\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\n\r\nconst Error404: React.FC = () => {\r\n    return (\r\n        <div>\r\n            404. PAGE NOT FOUND\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;\r\n","import React from 'react';\r\n\r\nconst NewPassword: React.FC = () => {\r\n    return (\r\n        <div>\r\n            NEW PASSWORD PAGE\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPassword;\r\n","import React from 'react';\r\n\r\nconst Test: React.FC = () => {\r\n    return (\r\n        <div>\r\n            TEST PAGE\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n})\r\n\r\n    // http://localhost:7542/2.0/\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post(`auth/register`, {email, password})\r\n    },\r\n\r\n}","import {authAPI} from \"../m3-dall/instance\";\r\n\r\nconst IS_REGISTER = \"AUTH/IS_REGISTER\"\r\nconst IS_ERROR_MESSAGE = \"AUTH/IS_ERROR_MESSAGE\"\r\n\r\nexport const setIsRegister = (value: boolean) => ({type: \"AUTH/IS_REGISTER\", value} as const)\r\n\r\nexport type setIsRegisterACType = ReturnType<typeof setIsRegister>\r\n\r\nexport const setIsErrorMessage = (value: string) => ({type: \"AUTH/IS_ERROR_MESSAGE\", value} as const)\r\n\r\nexport type setIsErrorMessageACType = ReturnType<typeof setIsErrorMessage>\r\n\r\ntype ActionsType = setIsRegisterACType | setIsErrorMessageACType\r\n\r\nexport const registrationThunk = (email: string, password: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await authAPI.registration(email, password);\r\n        dispatch(setIsRegister(true))\r\n        console.log(response)\r\n    } catch (error) {\r\n        dispatch(setIsErrorMessage(error.response.data.error))\r\n    } finally {\r\n        dispatch(setIsRegister(false))\r\n    }\r\n\r\n}\r\n\r\nconst initialState = {\r\n    isRegister: false,\r\n    isErrorMessage: \"\",\r\n};\r\nexport type AuthInitialStateType = typeof initialState;\r\n\r\nexport const registerReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case IS_REGISTER:\r\n            return {...state, isRegister: action.value};\r\n        case IS_ERROR_MESSAGE:\r\n            return {...state, isErrorMessage: action.value};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default registerReducer\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {PATH} from \"../Routes\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ninterface RegisterProps {\r\n    onClick: () => void\r\n    onChangeMail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangePassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    isRegister: boolean\r\n    isErrorMessage: string\r\n    mail: string\r\n    password: string\r\n}\r\n\r\nconst Register: React.FC<RegisterProps> = (\r\n    {\r\n        onClick,\r\n        onChangeMail,\r\n        onChangePassword,\r\n        isRegister,\r\n        isErrorMessage,\r\n        mail,\r\n        password,\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div>\r\n            MY REGISTER PAGE\r\n            <div>\r\n                <div>\r\n                    <input value={mail} type=\"text\" placeholder=\"E-mail\" onChange={onChangeMail}/>\r\n                </div>\r\n                <div>\r\n                    <input value={password} type=\"password\" placeholder=\"Password\" onChange={onChangePassword}/>\r\n                </div>\r\n            </div>\r\n            <button onClick={onClick}>Sign Up</button>\r\n            {isRegister ? <Redirect to={PATH.LOGIN}/> : <div>{isErrorMessage}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationThunk} from \"../../m2-bll/register-reducer\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport Register from \"./Register\";\r\n\r\nconst RegisterContainer: React.FC = () => {\r\n    console.log('render Container')\r\n    let isRegister = useSelector((state: AppRootStateType) => state.register.isRegister)\r\n    let isErrorMessage = useSelector((state: AppRootStateType) => state.register.isErrorMessage)\r\n    const dispatch = useDispatch()\r\n    const [mail, setMail] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n    const onChangeMail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMail(e.currentTarget.value)\r\n    }\r\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n    const onChangeHandler = () => {\r\n        dispatch(registrationThunk(mail, password))\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Register onClick={onChangeHandler}\r\n                      onChangeMail={onChangeMail}\r\n                      onChangePassword={onChangePassword}\r\n                      isRegister={isRegister}\r\n                      isErrorMessage={isErrorMessage}\r\n                      mail={mail}\r\n                      password={password}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterContainer;\r\n","import React from 'react';\r\nimport RegisterContainer from \"./RegisterContainer\";\r\n\r\n\r\nconst RegisterPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <RegisterContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default RegisterPage;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './InputText.module.css';\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// здесь мы говорим что у нашего инпута будут такие же пропсы как у обычного инпута\r\n// (чтоб не писать value: string, onChange: ...; они уже все описаны в DefaultInputPropsType)\r\ntype InputTextPropsType = DefaultInputPropsType & { // и + ещё пропсы которых нет в стандартном инпуте\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst InputText: React.FC<InputTextPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // если есть пропс onChange\r\n        && onChange(e) // то передать ему е (поскольку onChange не обязателен)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // если есть пропс onEnter\r\n        && e.key === 'Enter' // и если нажата кнопка Enter\r\n        && onEnter() // то вызвать его\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${s.className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (value например там внутри)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InputText\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './Checkbox.module.css'\r\n\r\n// тип пропсов обычного инпута\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype CheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst Checkbox: React.FC<CheckboxPropsType> = (\r\n    {\r\n        type, // достаём и игнорируем чтоб нельзя было задать другой тип инпута\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // в эту переменную попадёт текст, типизировать не нужно так как он затипизирован в React.FC\r\n\r\n        ...restProps// все остальные пропсы попадут в объект restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e);\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // отдаём инпуту остальные пропсы если они есть (checked например там внутри)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // благодаря label нажатие на спан передастся в инпут\r\n    )\r\n}\r\n\r\nexport default Checkbox\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './Button.module.css';\r\n\r\n// тип пропсов обычной кнопки, children в котором храниться название кнопки там уже описан\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst Button: React.FC<ButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// все остальные пропсы попадут в объект restProps, там же будет children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.button} ${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // отдаём кнопке остальные пропсы если они есть (children там внутри)\r\n        />\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React, {Dispatch, SetStateAction} from 'react';\r\nimport InputText from \"../common/input/InputText\";\r\nimport Checkbox from \"../common/checkbox/Checkbox\";\r\nimport Button from \"../common/button/Button\";\r\n\r\ntype LoginPropsType = {\r\n    onClick: () => void,\r\n    onChangeEmail: any                 //Dispatch<SetStateAction<string>>\r\n    onChangePassword: any                 //Dispatch<SetStateAction<string>>\r\n    onChangeChecked: any                //Dispatch<SetStateAction<boolean>>\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (\r\n    {\r\n        onClick,\r\n        onChangeEmail,\r\n        onChangePassword,\r\n        onChangeChecked\r\n    }\r\n) => {\r\n    return (\r\n        <div>\r\n            <h3> LOGIN </h3>\r\n            <div>\r\n                <InputText type={'email'}\r\n                           placeholder={'Enter email'}\r\n                           onChangeText={onChangeEmail}\r\n                />\r\n            </div>\r\n            <div>\r\n                <InputText type={'password'}\r\n                           placeholder={'Enter password'}\r\n                           onChangeText={onChangePassword}\r\n                />\r\n            </div>\r\n            <div>\r\n                <Checkbox onChangeChecked={onChangeChecked}>remember me</Checkbox>\r\n            </div>\r\n            <div><Button onClick={onClick}>Submit</Button></div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","import axios from \"axios\";\r\n\r\nexport const inctance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport type LoginParametersType = {\r\n    email: string\r\n    password: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nexport const authAPI = {\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return inctance.post('auth/login', {email, password, rememberMe})\r\n    },\r\n    logout() {\r\n        return inctance.delete('auth/me')\r\n    }\r\n}\r\n","import {authAPI, LoginParametersType} from \"../m3-dal/LoginAPI\";\r\nimport {Dispatch} from \"redux\";\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA'\r\n\r\ntype InitialStateType = {\r\n    user: UserDataType | {},\r\n    isAuth: boolean\r\n}\r\n\r\ntype UserDataType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\nconst initialState = {\r\n    user: {},\r\n    isAuth: false\r\n};\r\n\r\ntype ActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n\r\nexport const loginReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA: {\r\n            return {\r\n                ...state,\r\n                user: action.payload,\r\n                isAuth: true            //isAuth: must not be\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// ACs\r\nexport const setAuthUserDataAC = (payload: InitialStateType) => ({type: SET_USER_DATA, payload}) as const;\r\n\r\n// Thunks\r\nexport const getAuthUserData = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch<ActionsType>) => {\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(res => {\r\n            console.log(res.data)\r\n            dispatch(setAuthUserDataAC(res.data))\r\n        })\r\n        .catch((e) => {\r\n        const error = e.response ? e.response.data.error:(e.message+', more details in the console')\r\n            console.log(error)\r\n    })\r\n}\r\n\r\n\r\n\r\n","import React, {useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Login from \"./Login\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {getAuthUserData} from \"../../m2-bll/login-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {PATH} from \"../Routes\";\r\n\r\ntype LoginContainerPropsType = {}\r\n\r\nconst LoginContainer: React.FC<LoginContainerPropsType> = (props: any) => {\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.login.isAuth);\r\n\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState<string>('panich2303@gmail.com');\r\n    const [password, setPassword] = useState<string>('1234567');\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\n    const onClickHandler = () => {\r\n        dispatch(getAuthUserData(email, password, rememberMe))\r\n    }\r\n\r\n    if (isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <Login onClick={onClickHandler}\r\n                   onChangeEmail={setEmail}\r\n                   onChangePassword={setPassword}\r\n                   onChangeChecked={setRememberMe}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LoginContainer;\r\n\r\n","import axios from 'axios';\r\n\r\nexport interface IForgotData {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nconst from = 'pvlchkhrv@gmail.com';\r\nconst message = `<div>password recover link: <a href='https://neko-back.herokuapp.com/2.0/set-new-password/$token$'>Link</a></div>`;\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n});\r\n\r\nexport const restorePasswordAPI = {\r\n    restorePassword(email: string) {\r\n        return instance.post('/auth/forgot', {email, from, message})\r\n    },\r\n    ping(){\r\n        return instance.get(`/ping/?frontTime=${Date.now()}`);\r\n    }\r\n};\r\n","const initialState: InitialStateType = {\r\n    status: 'idle',\r\n    isError: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case 'APP/SET-STATUS':\r\n            return {...state, status: action.status}\r\n        case 'APP/SET-ERROR':\r\n            return {...state, isError: action.isError}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppError = (isError: boolean) => ({ type: 'APP/SET-ERROR', isError } as const);\r\nexport const setAppStatus = (status:  RequestStatusType) => ({ type: 'APP/SET-STATUS', status } as const);\r\n\r\n// types\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>\r\n\r\ntype ActionsType =\r\n    | SetAppErrorActionType\r\n    | SetAppStatusActionType\r\n\r\nexport type RequestStatusType =  'idle' | 'loading' | 'succeed' | 'failed'\r\n\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    isError: boolean\r\n\r\n}\r\n","import {restorePasswordAPI} from '../m3-dal/restoreAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {setAppError, setAppStatus} from './app-reducer';\r\n\r\nconst SET_SUCCESS_MESSAGE = 'AUTH/SET-SUCCESS-MESSAGE';\r\nconst SET_ERROR_MESSAGE = 'AUTH/SET-ERROR-MESSAGE';\r\nconst SET_IS_REGISTERED = 'AUTH/SET-IS-REGISTERED';\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    successMessage: '',\r\n    errorMessage: '',\r\n}\r\n\r\nexport const restorePasswordReducer = (state: InitialStateType = initialState, action: ActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_REGISTERED: return {...state, isRegistered: action.isRegistered};\r\n        case SET_ERROR_MESSAGE: return {...state, errorMessage: action.errorMessage};\r\n        case SET_SUCCESS_MESSAGE: return {...state, successMessage: action.successMessage};\r\n        default: return state;\r\n    }\r\n};\r\n\r\n//ACs\r\nexport const setSuccessMessage = (successMessage: string) => ({type: SET_SUCCESS_MESSAGE, successMessage} as const);\r\nexport const setIsRegistered = (isRegistered: boolean) => ({type: SET_IS_REGISTERED, isRegistered} as const);\r\nexport const setErrorMessage = (errorMessage: string) => ({type: SET_ERROR_MESSAGE, errorMessage} as const);\r\n\r\n//Thunks\r\nexport const restorePasswordTC = (email: string) => (dispatch: Dispatch<ActionsType>) => {\r\n    dispatch(setAppStatus('loading'));\r\n    restorePasswordAPI.restorePassword(email)\r\n        .then(res => {\r\n            dispatch(setIsRegistered(true));\r\n            dispatch(setSuccessMessage(res.data.info));\r\n            dispatch(setAppStatus('succeed'));\r\n            dispatch(setAppError(false));\r\n        })\r\n        .catch((error) => {\r\n            // dispatch(setIsFetching(true));\r\n            dispatch(setAppStatus('failed'));\r\n            dispatch(setAppError(true));\r\n            dispatch(setErrorMessage(error.response.data.error));\r\n            dispatch(setIsRegistered(false))\r\n        })\r\n}\r\nexport const pingServerTC = () => (dispatch: Dispatch<ActionsType>) => {\r\n    restorePasswordAPI.ping()\r\n        .then(res => {\r\n            console.log(res.data);\r\n        })\r\n}\r\n\r\n//Types\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setIsRegistered>\r\n    | ReturnType<typeof setSuccessMessage>\r\n    | ReturnType<typeof setErrorMessage>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n","import React, {ChangeEvent} from 'react';\r\nimport InputText from '../common/input/InputText';\r\nimport Button from '../common/button/Button';\r\n\r\ninterface RestorePasswordFormPropsType {\r\n    onClick: () => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const RestorePasswordForm: React.FC<RestorePasswordFormPropsType> = ({onClick, onChange}) => {\r\n\r\n    return (\r\n        <form onSubmit={onClick}>\r\n            <div>\r\n                <InputText type=\"text\" onChange={onChange}/>\r\n            </div>\r\n            <div>\r\n                <Button type={'submit'}>Restore</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {RequestStatusType} from '../../m2-bll/app-reducer';\r\nimport {RestorePasswordForm} from './RestorePasswordForm';\r\n\r\ninterface IForgotProps {\r\n    onClick: () => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    appStatus: RequestStatusType\r\n    errorMessage: string\r\n    successMessage: string\r\n}\r\n\r\nconst RestorePassword: React.FC<IForgotProps> = (\r\n    {\r\n        onClick,\r\n        onChange,\r\n        appStatus,\r\n        errorMessage,\r\n        successMessage\r\n    }\r\n) => {\r\n    console.log('render PageFrom')\r\n    return (\r\n        <div>\r\n            <h1>Restore Password Page</h1>\r\n            <div>\r\n                <RestorePasswordForm onClick={onClick}\r\n                                     onChange={onChange}\r\n                />\r\n                {appStatus === 'loading' && <div>Loading...</div>}\r\n                {appStatus === 'failed' && <div>{errorMessage}</div>}\r\n                {appStatus === 'succeed' && <div>{successMessage}</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestorePassword;\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {restorePasswordTC} from '../../m2-bll/restore-password-reducer';\r\nimport RestorePassword from './RestorePassword';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../Routes';\r\nimport {RequestStatusType} from '../../m2-bll/app-reducer';\r\n\r\nconst RestorePasswordContainer: React.FC = () => {\r\n    console.log('render Page')\r\n\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.restorePassword.isRegistered);\r\n    const errorMessage = useSelector<AppRootStateType, string>(state => state.restorePassword.errorMessage);\r\n    const successMessage = useSelector<AppRootStateType, string>(state => state.restorePassword.successMessage);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value);\r\n    }\r\n    const onClickHandler = () => {\r\n        dispatch(restorePasswordTC(email));\r\n        setEmail('')\r\n    }\r\n    if (isRegistered) return <Redirect to={PATH.SET_NEW_PASSWORD}/>\r\n    return (\r\n        <div>\r\n            <RestorePassword onClick={onClickHandler}\r\n                             onChange={onChangeHandler}\r\n                             appStatus={appStatus}\r\n                             errorMessage={errorMessage}\r\n                             successMessage={successMessage}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestorePasswordContainer;\r\n","import React from 'react';\r\nimport RestorePasswordContainer from './RestorePasswordContainer';\r\n\r\nconst RestorePasswordPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <RestorePasswordContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default RestorePasswordPage;\r\n","import React from 'react';\r\nimport {Switch, Route, Redirect} from 'react-router-dom'\r\nimport Profile from './profile/Profile';\r\nimport Error404 from './404/Error404';\r\nimport NewPassword from './new-password/NewPassword';\r\nimport Test from './test/Test';\r\nimport RegisterPage from \"./registration/RegisterPage\";\r\nimport LoginContainer from \"./login/LoginContainer\";\r\nimport RestorePasswordPage from \"./restore-password/RestorePasswordPage\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    PROFILE: '/profile',\r\n    ERROR: '/error',\r\n    RESTORE_PASSWORD: '/restore-password',\r\n    SET_NEW_PASSWORD: '/set-new-password',\r\n    TEST:'/test'\r\n\r\n}\r\n\r\nexport const Routes: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <Redirect to={'/login'}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <RegisterPage/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <RegisterPage/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <Profile/>}/>\r\n                <Route path={PATH.RESTORE_PASSWORD} render={() => <RestorePasswordPage/>}/>\r\n                <Route path={PATH.SET_NEW_PASSWORD} render={() => <NewPassword/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../Routes';\r\nimport s from './Header.module.css';\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <div className={s.headerContainer}>\r\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER}>Register</NavLink>\r\n            <NavLink to={PATH.PROFILE}>Profile</NavLink>\r\n            <NavLink to={PATH.RESTORE_PASSWORD}>Restore Password</NavLink>\r\n            <NavLink to={PATH.SET_NEW_PASSWORD}>Set New Password</NavLink>\r\n            <NavLink to={PATH.TEST}>Demo</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\nimport './App.css';\nimport Header from './header/Header';\nimport {HashRouter} from 'react-router-dom';\nimport Routes from './Routes';\n\nfunction App() {\n    return (\n        <HashRouter>\n            <div className={'App'}>\n                <Header/>\n                <Routes/>\n            </div>\n        </HashRouter>\n    )\n}\n\nexport default App;\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {};\r\nexport const profileReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case '': {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","const initialState = {};\r\nexport const newPasswordReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case '': {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","const initialState = {};\r\nexport const testReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case '': {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {loginReducer} from './login-reducer';\r\nimport {registerReducer} from './register-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {restorePasswordReducer} from './restore-password-reducer';\r\nimport {newPasswordReducer} from './new-password-reducer';\r\nimport {testReducer} from './test-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    test: testReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './c1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './c1-main/m2-bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}