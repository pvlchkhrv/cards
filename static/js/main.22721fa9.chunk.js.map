{"version":3,"sources":["c1-main/m1-ui/cardPacks/DoubleSlider.module.css","c1-main/m1-ui/header/Header.module.css","c1-main/m1-ui/App.module.css","c1-main/m1-ui/404/Error404.tsx","c1-main/m1-ui/test/Test.tsx","c1-main/m3-dall/instance.ts","c1-main/m2-bll/register-reducer.ts","c1-main/m1-ui/registration/Register.tsx","c1-main/m1-ui/registration/RegisterContainer.tsx","c1-main/m1-ui/registration/RegisterPage.tsx","c1-main/m2-bll/app-reducer.ts","c1-main/m3-dal/instance.ts","c2-features/f1-auth/authAPI.ts","c2-features/f1-auth/a3-profile/profile-reducer.ts","c2-features/f1-auth/a1-login/login-reducer.ts","c2-features/f1-auth/a1-login/Login.tsx","c2-features/f1-auth/a1-login/LoginContainer.tsx","c1-main/m3-dal/restoreAPI.ts","c1-main/m2-bll/restore-password-reducer.ts","c1-main/m1-ui/common/input/InputText.tsx","c1-main/m1-ui/common/button/Button.tsx","c1-main/m1-ui/restore-password/RestorePasswordForm.tsx","c1-main/m1-ui/restore-password/RestorePassword.tsx","c1-main/m1-ui/restore-password/RestorePasswordContainer.tsx","c1-main/m1-ui/restore-password/RestorePasswordPage.tsx","c1-main/m1-ui/new-password/NewPassword.tsx","c1-main/m3-dal/newPasswordAPI.tsx","c1-main/m2-bll/new-password-reducer.ts","c1-main/m1-ui/new-password/NewPasswordContainer.tsx","c1-main/m1-ui/cardPacks/DataTable.tsx","c1-main/m1-ui/cardPacks/DoubleSlider.tsx","c1-main/m1-ui/cardPacks/PaginationBar.tsx","c1-main/m1-ui/cardPacks/CardPacks.tsx","c1-main/m3-dal/cardsPackAPI.ts","c1-main/m2-bll/cardPacks-reducer.ts","c1-main/m1-ui/cardPacks/CardPacksContainer.tsx","c1-main/m1-ui/cardPacks/Ð¡ardPacksPage.tsx","c1-main/m1-ui/common/editable-span/EditableSpan.tsx","c2-features/f1-auth/a3-profile/Profile.tsx","c2-features/f1-auth/a3-profile/ProfileContainer.tsx","c1-main/m1-ui/profile/ProfilePage.tsx","c1-main/m1-ui/Routes.tsx","c1-main/m1-ui/header/Header.tsx","c1-main/m1-ui/App.tsx","reportWebVitals.ts","c1-main/m2-bll/test-reducer.ts","c1-main/m2-bll/store.ts","index.tsx","c1-main/m1-ui/new-password/NewPassword.module.css","c1-main/m1-ui/common/input/InputText.module.css","c2-features/f1-auth/a3-profile/Profile.module.css","c2-features/f1-auth/a1-login/Login.module.css","c1-main/m1-ui/common/button/Button.module.css","c1-main/m1-ui/cardPacks/CardPackagePage.module.css","c1-main/m1-ui/404/Error404.module.css"],"names":["module","exports","Error404","className","s","main","Test","instance","axios","create","baseURL","withCredentials","authAPI","email","password","post","IS_REGISTER","IS_ERROR_MESSAGE","setIsRegister","value","type","initialState","isRegister","isErrorMessage","registerReducer","state","action","Register","onClick","onChangeMail","onChangePassword","mail","placeholder","onChange","to","PATH","LOGIN","RegisterContainer","console","log","useSelector","register","dispatch","useDispatch","useState","setMail","setPassword","a","response","data","error","registrationThunk","e","currentTarget","RegisterPage","SET_STATUS","SET_ERROR_MESSAGE","SET_SUCCESS_MESSAGE","SET_IS_AUTH","AppInitialState","status","errorMessage","successMessage","isAuth","setAppError","setAppStatus","setAppIsAuth","rememberMe","delete","name","avatar","put","PROFILE_DATA","NEW_PROFILE_NAME","NEW_PROFILE_AVATAR","ProfileInitialState","profileData","token","setProfileData","user","authMe","then","res","setAuthUserData","updatedUser","catch","message","changeProfile","setProfileName","setProfileAvatar","profileReducer","SET_USER_DATA","LoginInitialState","logOutTC","Login","onSubmitHandler","formik","useFormik","initialValues","validate","values","errors","test","length","onSubmit","loginContainer","Paper","formContainer","elevation","handleSubmit","FormControl","FormLabel","FormGroup","form","TextField","variant","label","margin","getFieldProps","touched","style","color","FormControlLabel","control","Checkbox","LoginContainer","app","PROFILE","getAuthUserData","restorePasswordAPI","from","SET_IS_REGISTERED","isRegistered","setIsRegistered","restorePasswordTC","info","InputText","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","input","errorInput","superInput","key","Button","red","finalClassName","button","default","RestorePasswordForm","RestorePassword","appStatus","RestorePasswordContainer","restorePassword","setEmail","SET_NEW_PASSWORD","RestorePasswordPage","NewPassword","isChecked","requestStatus","onChangeNewPassword","viewPassword","newPassword","set","card","title","text","disabled","inctance","newPasswordAPI","resetPassword","isSuccessful","newPasswordReducer","NewPasswordContainer","setNewPassword","setIsChek","useParams","setNewPasswordTC","DataTable","packs","deletePackHandler","editPackHandler","userId","packUserId","TableContainer","component","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","pack","scope","cardsCount","updated","created","user_id","_id","DoubleSlider","setValue","slider","Slider","event","newValue","valueLabelDisplay","aria-labelledby","getAriaValueText","PaginationBar","page","pages","onChangePage","pageCount","onChangeItemsQuantity","Pagination","count","CardPacks","getAllPacksHandler","getUserPackHandler","createPackHandler","isMine","Container","fixed","container","Grid","item","xs","settings","packList","id","size","packsAPI","params","get","cardsPack","SET_PACKS","SET_USER_ID","SET_PAGE","SET_PAGE_COUNT","SET_PACKS_TOTAL_COUNT","PacksInitState","packsData","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","packUser_id","setUserId","setPage","getPacks","getState","min","max","totalCount","CardPacksContainer","login","setIsMine","Math","ceil","useEffect","createPack","packId","updatePackTitleOnServer","CardPacksPage","EditableSpan","React","memo","props","editMode","setEditMode","autoFocus","onBlur","onDoubleClick","fontSize","Profile","onAvatarChange","onNameChange","onLogoutClick","nameValue","avatarValue","paper","Avatar","alt","src","List","ListItem","ListItemIcon","ListItemText","buttonGroup","ProfileContainer","profile","setAvatarValue","avatarLink","newName","REGISTER","ERROR","RESTORE_PASSWORD","CARD_PACKS","TEST","Routes","exact","path","render","ProfilePage","Header","headerContainer","App","maxWidth","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"uGACAA,EAAOC,QAAU,CAAC,OAAS,+B,oBCA3BD,EAAOC,QAAU,CAAC,gBAAkB,kC,0CCApCD,EAAOC,QAAU,CAAC,IAAM,mB,qICUTC,EARY,WACvB,OACI,qBAAKC,UAAWC,IAAEC,KAAlB,kCCKOC,EARQ,WACnB,OACI,6C,iECFKC,EAAWC,IAAMC,OAAO,CACjCC,QAAS,sCACTC,iBAAiB,IAIRC,EAAU,SACNC,EAAeC,GACxB,OAAOP,EAASQ,KAAT,gBAA+B,CAACF,QAAOC,cCRhDE,EAAc,mBACdC,EAAmB,wBAEZC,EAAgB,SAACC,GAAD,MAAqB,CAACC,KAAM,mBAAoBD,UAuBvEE,EAAe,CACjBC,YAAY,EACZC,eAAgB,IAIPC,EAAkB,WAA4F,IAA3FC,EAA0F,uDAA5DJ,EAAcK,EAA8C,uCACtH,OAAQA,EAAON,MACX,KAAKJ,EACD,OAAO,2BAAIS,GAAX,IAAkBH,WAAYI,EAAOP,QACzC,KAAKF,EACD,OAAO,2BAAIQ,GAAX,IAAkBF,eAAgBG,EAAOP,QAC7C,QACI,OAAOM,ICEJE,EA7B2B,SAAC,GAUrC,IAREC,EAQH,EARGA,QACAC,EAOH,EAPGA,aACAC,EAMH,EANGA,iBACAR,EAKH,EALGA,WACAC,EAIH,EAJGA,eACAQ,EAGH,EAHGA,KACAjB,EAEH,EAFGA,SAIJ,OACI,mDAEI,gCACI,8BACI,uBAAOK,MAAOY,EAAMX,KAAK,OAAOY,YAAY,SAASC,SAAUJ,MAEnE,8BACI,uBAAOV,MAAOL,EAAUM,KAAK,WAAWY,YAAY,WAAWC,SAAUH,SAGjF,wBAAQF,QAASA,EAAjB,qBACCN,EAAa,cAAC,IAAD,CAAUY,GAAIC,GAAKC,QAAW,8BAAMb,QCD/Cc,EA/BqB,WAChCC,QAAQC,IAAI,oBACZ,IAAIjB,EAAakB,aAAY,SAACf,GAAD,OAA6BA,EAAMgB,SAASnB,cACrEC,EAAiBiB,aAAY,SAACf,GAAD,OAA6BA,EAAMgB,SAASlB,kBACvEmB,EAAWC,cAJqB,EAKdC,mBAAiB,IALH,mBAK/Bb,EAL+B,KAKzBc,EALyB,OAMND,mBAAiB,IANX,mBAM/B9B,EAN+B,KAMrBgC,EANqB,KAiBtC,OACI,8BACI,cAAC,EAAD,CAAUlB,QANM,WACpBc,EFLyB,SAAC7B,EAAeC,GAAhB,8CAAqC,WAAO4B,GAAP,eAAAK,EAAA,+EAEzCnC,EAAqBC,EAAOC,GAFa,OAE1DkC,EAF0D,OAG9DN,EAASxB,GAAc,IACvBoB,QAAQC,IAAIS,GAJkD,gDAM9DN,EAZ6C,CAACtB,KAAM,wBAAyBD,MAYlD,KAAM6B,SAASC,KAAKC,QANe,yBAQ9DR,EAASxB,GAAc,IARuC,4EAArC,sDEKhBiC,CAAkBpB,EAAMjB,KAMnBe,aAbG,SAACuB,GAClBP,EAAQO,EAAEC,cAAclC,QAaVW,iBAXO,SAACsB,GACtBN,EAAYM,EAAEC,cAAclC,QAWdG,WAAYA,EACZC,eAAgBA,EAChBQ,KAAMA,EACNjB,SAAUA,OCpBjBwC,EAPgB,WAC3B,OACI,8BACI,cAAC,EAAD,OCPNC,EAAa,iBACbC,EAAoB,wBACpBC,EAAsB,0BACtBC,EAAc,kBAEdC,EAAuC,CACzCC,OAAQ,OACRC,aAAc,GACdC,eAAe,GACfC,QAAQ,GAkBCC,EAAc,SAACH,GAAD,MAA2B,CAACzC,KAAMoC,EAAmBK,iBAEnEI,EAAe,SAACL,GAAD,MAAgC,CAACxC,KAAMmC,EAAYK,WAClEM,EAAe,SAACH,GAAD,MAAsB,CAAC3C,KAAMsC,EAAaK,WC7BzDxD,EAAWC,IAAMC,OAAO,CACjCC,QAAS,sCACTC,iBAAiB,ICGRC,EAAU,WAKf,OAAOL,EAASQ,KAAyB,aAAc,KALlDH,EAAU,SAObC,EAAeC,EAAkBqD,GACnC,OAAO5D,EAASQ,KAAwB,aAAc,CAACF,QAAOC,WAAUqD,gBARnEvD,EAAU,WAWf,OAAOL,EAAS6D,OAAO,UAAW,KAX7BxD,EAAU,SAsBLyD,EAAeC,GACzB,OAAO/D,EAASgE,IAA+B,UAAW,CAACF,OAAMC,YCxBnEE,EAAe,eACfC,EAAmB,mBACnBC,EAAqB,qBASrBC,EAAsB,CACxBC,YAAa,GACbC,MAAO,IA6BEC,EAAiB,SAACC,GAAD,MAAyB,CAAC3D,KAAMoD,EAAcO,SAK/DC,EAAS,kBAAM,SAACtC,GACzBA,EAASuB,EAAa,YACtBrD,IACKqE,MAAK,SAAAC,GAPU,IAACL,EAQbnC,EAASyC,GAAgBD,EAAIjC,KAAKmC,cAClC1C,EAASoC,EAAeI,EAAIjC,KAAKmC,cACjC1C,GAVamC,EAUKK,EAAIjC,KAAK4B,MAVK,CAACzD,KAAMoD,EAAcK,WAWrDnC,EAASwB,GAAa,OAEzBmB,OAAM,SAACjC,GACJV,EAASsB,EAAYZ,EAAEJ,SACjBI,EAAEJ,SAASC,KAAKC,MACfE,EAAEkC,QAAU,kCAEnB5C,EAASwB,GAAa,SAIrBqB,EAAgB,SAAClB,EAAeC,GAAhB,OAAiD,SAAC5B,GAC3EA,EAASuB,EAAa,YACtBrD,EAAsByD,EAAMC,GACvBW,MAAK,SAAAC,GACFxC,EAzBkB,SAAC2B,GAAD,MAAmB,CAACjD,KAAMqD,EAAkBJ,QAyBrDmB,CAAeN,EAAIjC,KAAKmC,YAAYf,OAC7C3B,EAzBoB,SAAC4B,GAAD,MAAiC,CAAClD,KAAMsD,EAAoBJ,UAyBvEmB,CAAiBP,EAAIjC,KAAKmC,YAAYd,YAGlDe,OAAM,SAAAjC,GACHV,EAASsB,EAAYZ,EAAEJ,SACjBI,EAAEJ,SAASC,KAAKC,MACfE,EAAEkC,QAAU,uCA8BhBI,EA1Fe,WAAuF,IAAtFjE,EAAqF,uDAApDkD,EAAqBjD,EAA+B,uCAChH,OAAQA,EAAON,MACX,KAAKoD,EACD,OAAO,2BACA/C,GADP,IAEImD,YAAalD,EAAOqD,OAE5B,KAAKN,EACD,OAAO,2BACAhD,GADP,IAEImD,YAAY,2BACLnD,EAAMmD,aADF,IACeP,KAAM3C,EAAO2C,SAG/C,KAAKK,EACD,OAAO,2BACAjD,GADP,IAEImD,YAAY,2BACLnD,EAAMmD,aADF,IACeN,OAAQ5C,EAAO4C,WAGjD,QACI,OAAO7C,ICtCbkE,EAAgB,gBAqBhBC,GAAoB,CACtBb,KAAM,IAsBGI,GAAkB,SAACJ,GAAD,MAAgC,CAAC3D,KAAMuE,EAAeZ,SAwBxEc,GAAW,kBAAM,SAACnD,GAC3B9B,IACKqE,MAAK,SAAAC,GJ/Ce,IAACpB,EIgDdpB,GJhDcoB,EIgDSoB,EAAIjC,KJhDe,CAAC7B,KAAMqC,EAAqBK,oBIiDtEpB,EAASyC,GAAgB,UAGhCE,OAAM,SAACjC,GACJV,EAASsB,EAAYZ,EAAEJ,SACjBI,EAAEJ,SAASC,KAAKC,MACfE,EAAEkC,QAAU,uC,8GCjElBQ,GAAkC,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,gBACvCC,EAASC,aAAU,CACrBC,cAAe,CACXrF,MAAO,uBACPC,SAAU,WACVqD,YAAY,GAEhBgC,SAAU,SAAAC,GACN,IAAMC,EAA0B,GAchC,OAZKD,EAAOvF,MAEA,4CAA4CyF,KAAKF,EAAOvF,SAChEwF,EAAOxF,MAAQ,yBAFfwF,EAAOxF,MAAQ,WAKduF,EAAOtF,SAEDsF,EAAOtF,SAASyF,OAAS,IAChCF,EAAOvF,SAAW,kCAFlBuF,EAAOvF,SAAW,wBAKfuF,GAEXG,SAAU,SAAAJ,GACNL,EAAgBK,EAAOvF,MAAOuF,EAAOtF,SAAUsF,EAAOjC,eAG9D,OACI,qBAAKhE,UAAWC,KAAEqG,eAAlB,SACI,cAACC,GAAA,EAAD,CAAOvG,UAAWC,KAAEuG,cAAeC,UAAW,EAA9C,SACI,sBAAMJ,SAAUR,EAAOa,aAAvB,SACI,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,UACI,yCAEJ,eAACC,GAAA,EAAD,CAAW7G,UAAWC,KAAE6G,KAAxB,UACI,cAACC,GAAA,EAAD,aACIC,QAAS,WACTC,MAAM,QACNC,OAAO,UACHrB,EAAOsB,cAAc,WAE5BtB,EAAOuB,QAAQ1G,OAChBmF,EAAOK,OAAOxF,MAAQ,qBAAK2G,MAAO,CAACC,MAAO,OAApB,SAA6BzB,EAAOK,OAAOxF,QAAe,KAChF,cAACqG,GAAA,EAAD,aACIC,QAAS,WACT/F,KAAK,WACLgG,MAAM,WACNC,OAAO,UACHrB,EAAOsB,cAAc,cAE5BtB,EAAOuB,QAAQzG,UAChBkF,EAAOK,OAAOvF,SAAW,qBAAK0G,MAAO,CAACC,MAAO,OAApB,SAA6BzB,EAAOK,OAAOvF,WAAkB,KACtF,cAAC4G,GAAA,EAAD,CACIN,MAAO,cACPO,QACI,cAACC,GAAA,EAAD,eACQ5B,EAAOsB,cAAc,kBAGrC,cAAC,KAAD,CAAQlG,KAAM,SAAU+F,QAAS,YAAaM,MAAO,UAArD,iCCrDbI,GAhBsB,WAAO,IAAD,EAEgBrF,aAAmD,SAAAf,GAAK,OAAIA,EAAMqG,OAAlH/D,EAFgC,EAEhCA,OACDrB,GAHiC,EAExBkB,OAFwB,EAEhBC,aAFgB,EAEFC,eACpBnB,eAKjB,OAAGoB,EACQ,cAAC,IAAD,CAAU7B,GAAIC,GAAK4F,UAG1B,cAAC,GAAD,CAAOhC,gBAPa,SAAClF,EAAeC,EAAkBqD,GACtDzB,EFuCuB,SAAC7B,EAAeC,EAAkBqD,GAAlC,OAA0D,SAACzB,GACtFA,EAASuB,EAAa,YACtBrD,EAAcC,EAAOC,EAAUqD,GAC1Bc,MAAK,SAAAC,GACFxC,EAASyC,GAAgBD,EAAIjC,OAC7B6B,EAAeI,EAAIjC,MACnBP,EAASuB,EAAa,YACtBvB,EAASwB,GAAa,OAEzBmB,OAAM,SAACjC,GACJV,EAASsB,EAAYZ,EAAEJ,SACjBI,EAAEJ,SAASC,KAAKC,MACfE,EAAEkC,QAAU,kCAEnB5C,EAASuB,EAAa,WACtBvB,EAASwB,GAAa,QEtDjB8D,CAAgBnH,EAAOC,EAAUqD,QCL5C5D,GAAWC,IAAMC,OAAO,CAC1BC,QAAS,sCACTC,iBAAiB,IAGRsH,GAAqB,SACdpH,GACZ,OAAON,GAASQ,KAAK,eAAgB,CAACF,QAAOqH,KAVxC,sBAU8C5C,QAT9C,uHCLP7B,GAAsB,2BACtBD,GAAoB,yBACpB2E,GAAoB,yBAEpB9G,GAAe,CACjB+G,cAAc,EACdtE,eAAgB,GAChBD,aAAc,IAcLwE,GAAkB,SAACD,GAAD,MAA4B,CAAChH,KAAM+G,GAAmBC,iBAIxEE,GAAoB,SAACzH,GAAD,OAAmB,SAAC6B,GACjDA,EAASuB,EAAa,YACtBgE,GAAmCpH,GAC9BoE,MAAK,SAAAC,GARmB,IAACpB,EAStBpB,EAAS2F,IAAgB,IACzB3F,GAVsBoB,EAUKoB,EAAIjC,KAAKsF,KAVc,CAACnH,KAAMqC,GAAqBK,oBAW9EpB,EAASuB,EAAa,eAEzBoB,OAAM,SAACjC,GAEJV,EAASuB,EAAa,WACtBvB,EAASsB,EAAYZ,EAAEkC,UAEvB5C,EAAS2F,IAAgB,S,6BCgBtBG,GA3CiC,SAAC,GAU5C,EARGpH,KAQF,IAPEa,EAOH,EAPGA,SAAUwG,EAOb,EAPaA,aACVC,EAMH,EANGA,WAAYC,EAMf,EANeA,QACZzF,EAKH,EALGA,MACW0F,GAId,EAJGzI,UAIH,EAJcyI,eAERC,EAEN,8GAeKC,EAAkB,UAAM1I,KAAE8C,MAAR,YAAiB0F,GAAgC,IACnEG,EAAmB,UAAM3I,KAAE4I,MAAR,YAAiB9F,EAAQ9C,KAAE6I,WAAa7I,KAAE8I,WAA1C,YAAwD9I,KAAED,WAEnF,OACI,qCACI,mCACIiB,KAAM,OACNa,SArBa,SAACmB,GACtBnB,GACGA,EAASmB,GAEZqF,GAAgBA,EAAarF,EAAEC,cAAclC,QAkBrCuH,WAhBe,SAACtF,GACxBsF,GAAcA,EAAWtF,GAEzBuF,GACa,UAAVvF,EAAE+F,KACFR,KAYKxI,UAAW4I,GAEPF,IAEP3F,GAAS,sBAAM/C,UAAW2I,EAAjB,SAAsC5F,Q,oBC3B7CkG,GAhB2B,SAAC,GAKrC,IAHEC,EAGH,EAHGA,IAAKlJ,EAGR,EAHQA,UACF0I,EAEN,oCACKS,EAAc,UAAMlJ,KAAEmJ,OAAR,YAAkBF,EAAMjJ,KAAEiJ,IAAMjJ,KAAEoJ,QAAlC,YAA6CrJ,GAEjE,OACI,oCACIA,UAAWmJ,GACPT,KCZHY,GAA8D,SAAC,GAAyB,IAAxB7H,EAAuB,EAAvBA,QAASK,EAAc,EAAdA,SAElF,OACI,uBAAMuE,SAAU5E,EAAhB,UACI,8BACI,cAAC,GAAD,CAAWR,KAAK,OAAOa,SAAUA,MAErC,8BACI,cAAC,GAAD,CAAQb,KAAM,SAAd,2BCoBDsI,GAzBiC,SAAC,GAQ3C,IANE9H,EAMH,EANGA,QACAK,EAKH,EALGA,SACA0H,EAIH,EAJGA,UACA9F,EAGH,EAHGA,aACAC,EAEH,EAFGA,eAIJ,OADAxB,QAAQC,IAAI,mBAER,gCACI,uDACA,gCACI,cAAC,GAAD,CAAqBX,QAASA,EACTK,SAAUA,IAEhB,YAAd0H,GAA2B,6CACb,WAAdA,GAA0B,8BAAM9F,IAClB,YAAd8F,GAA2B,8BAAM7F,WCUnC8F,GAhC4B,WACvCtH,QAAQC,IAAI,eAEZ,IAAMoH,EAAYnH,aAAiD,SAAAf,GAAK,OAAIA,EAAMqG,IAAIlE,UAChFwE,EAAe5F,aAAuC,SAAAf,GAAK,OAAIA,EAAMoI,gBAAgBzB,gBACrFvE,EAAerB,aAAsC,SAAAf,GAAK,OAAIA,EAAMoI,gBAAgBhG,gBACpFC,EAAiBtB,aAAsC,SAAAf,GAAK,OAAIA,EAAMoI,gBAAgB/F,kBAN/C,EAQnBlB,mBAAS,IARU,mBAQtC/B,EARsC,KAQ/BiJ,EAR+B,KASvCpH,EAAWC,cASjB,OAAIyF,EAAqB,cAAC,IAAD,CAAUlG,GAAIC,GAAK4H,mBAExC,8BACI,cAAC,GAAD,CAAiBnI,QAPF,WACnBc,EAAS4F,GAAkBzH,IAC3BiJ,EAAS,KAMY7H,SAXD,SAACmB,GACrB0G,EAAS1G,EAAEC,cAAclC,QAWJwI,UAAWA,EACX9F,aAAcA,EACdC,eAAgBA,OCxB9BkG,GAPuB,WAClC,OACI,8BACI,cAAC,GAAD,O,oBCqDGC,GAxCqC,SAAC,GAGO,IAFH/G,EAEE,EAFFA,MAAOgH,EAEL,EAFKA,UAAWC,EAEhB,EAFgBA,cAClBC,EACE,EADFA,oBAAqB5D,EACnB,EADmBA,SAAU6D,EAC7B,EAD6BA,aAAcC,EAC3C,EAD2CA,YAGlG,OACI,qBAAKnK,UAAWC,KAAEmK,IAAlB,SACI,sBAAKpK,UAAWC,KAAEoK,KAAlB,UAGI,oBAAIrK,UAAWC,KAAEqK,MAAjB,iCAEA,uBAAMtK,UAAWC,KAAE6G,KAAnB,UAEI,sBAAK9G,UAAWC,KAAE8C,MAAlB,UACKA,GAAS,+BAAOA,IACE,YAAlBiH,GAA+B,iDAEpC,cAAC,GAAD,CACI/I,KAAM8I,EAAY,OAAS,WAC3BjI,SAAUmI,EACVpI,YAAa,WACbb,MAAOmJ,IAEX,sBAAM1I,QAASyI,EAAf,2BACA,8BACI,sBAAMlK,UAAWC,KAAEsK,KAAnB,uFAGJ,cAAC,GAAD,CACIC,SAA4B,YAAlBR,EACVhK,UAAWC,KAAEmJ,OACb3H,QAAS4E,EAHb,0CC9CPoE,GAAWpK,IAAMC,OAAO,CACjCC,QAAS,uCACTC,iBAAiB,IAGRkK,GAAiB,SACd/J,EAAkBgK,GAC1B,OAAOF,GAAS7J,KAAK,oBAAqB,CAACD,WAAUgK,mBCFvDzJ,GAAe,CACjB6B,MAAO,GACP6H,cAAc,GAGLC,GAAqB,WAA6C,IAA5CvJ,EAA2C,uDAA9BJ,GAAcK,EAAgB,uCAC1E,OAAQA,EAAON,MACX,IAAK,oBACD,OAAO,2BACAK,GADP,IAEIyB,MAAOxB,EAAOwB,QAGtB,IAAK,gBACD,OAAO,2BACAzB,GADP,IAEIsJ,aAAcrJ,EAAOqJ,eAG7B,QACI,OAAOtJ,ICnBNwJ,GAAuB,WAAO,IAAD,EAEArI,mBAAS,IAFT,mBAE/B0H,EAF+B,KAElBY,EAFkB,OAGPtI,oBAAS,GAHF,mBAG/BsH,EAH+B,KAGpBiB,EAHoB,KAKhChB,EAAgB3H,aAAiD,SAAAf,GAAK,OAAIA,EAAMqG,IAAIlE,UACpFV,EAAQV,aAAsC,SAAAf,GAAK,OAAIA,EAAM6I,YAAYpH,SACzE6H,EAAevI,aAAuC,SAAAf,GAAK,OAAIA,EAAM6I,YAAYS,gBAEhFlG,EAASuG,cAATvG,MAEDnC,EAAWC,cAYjB,OAAIoI,EACO,cAAC,IAAD,CAAU7I,GAAI,eAIrB,8BACI,cAAC,GAAD,CACIgB,MAAOA,EACPgH,UAAWA,EACXC,cAAeA,EACfC,oBApBgB,SAAChH,GACzB8H,EAAe9H,EAAEC,cAAclC,QAoBvBqF,SAfK,WACb9D,EDMwB,SAAC4H,EAAsBQ,GAAvB,OAAiD,SAACpI,GAE9E,OADAA,EAASuB,EAAa,YACf4G,GAA2BP,EAAaQ,GAC1C7F,MAAK,SAAAjC,GACFN,EAN8C,CAACtB,KAAM,gBAAiB2J,cAM9C,IACxBrI,EAASuB,EAAa,eACvBoB,OAAM,SAAAjC,GACLV,EAV0C,CAACtB,KAAM,oBAAqB8B,MAU1CE,EAAEJ,SAASC,KAAKC,QAC5CR,EAASuB,EAAa,eCdjBoH,CAAiBf,EAAazF,KAe/BwF,aAnBS,WACjBc,GAAWjB,IAmBHI,YAAaA,O,oGChChBgB,GAA0C,SAAC,GAMO,IALHC,EAKE,EALFA,MACAC,EAIE,EAJFA,kBACAC,EAGE,EAHFA,gBAEAC,GACE,EAFFC,WAEE,EADFD,QAExD,OACI,8BACI,cAACE,GAAA,EAAD,CAAgBC,UAAWnF,KAA3B,SACI,eAACoF,GAAA,EAAD,CAAO3L,UAAW,gBAAiB4L,aAAW,eAA9C,UACI,cAACC,GAAA,EAAD,UACI,eAACC,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,UAAW,wCACX,cAACA,GAAA,EAAD,CAAWC,MAAM,SAAjB,mBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,SAAjB,qBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,SAAjB,qBACA,cAACD,GAAA,EAAD,CAAWC,MAAM,SAAjB,0BAGR,cAACC,GAAA,EAAD,UACKb,EAAMc,KAAI,SAACC,GAAD,OACP,eAACL,GAAA,EAAD,WACI,cAACC,GAAA,EAAD,CAAWL,UAAU,KAAKU,MAAM,MAAhC,SACKD,EAAKjI,OAEV,cAAC6H,GAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BG,EAAKE,aAChC,cAACN,GAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BG,EAAKG,UAChC,cAACP,GAAA,EAAD,CAAWC,MAAM,SAAjB,SAA2BG,EAAKI,UAChC,cAACR,GAAA,EAAD,CAAWC,MAAM,SAAjB,SAEQT,IAAWY,EAAKK,QACV,gCACE,cAAC,KAAD,CAAQ/K,QAAS,kBAAM4J,EAAkBc,EAAKM,MAA9C,oBACA,cAAC,KAAD,CACIhL,QAAS,kBAAM6J,EAAgBa,EAAKM,IAAK,sBAD7C,kBAEA,cAAC,KAAD,CAAQhL,QAAS,aAAjB,sBAIF,cAAC,KAAD,CAAQA,QAAS,aAAjB,uBAlBH0K,EAAKM,kB,+BC9BnCC,GAAe,WAAM,MAMJjK,mBAAmB,CAAC,GAAI,KANpB,mBAMvBzB,EANuB,KAMhB2L,EANgB,KAY9B,OACI,qBAAK3M,UAAWC,KAAE2M,OAAlB,SACI,cAACC,GAAA,EAAD,CACI7L,MAAOA,EACPc,SARS,SAACgL,EAAYC,GAC9BJ,EAASI,IAUDC,kBAAkB,OAClBC,kBAAgB,eAChBC,iBApBZ,SAAmBlM,GACf,MAAM,GAAN,OAAUA,EAAV,e,UCKKmM,GAA+C,SAAC,GAMO,IALHC,EAKE,EALFA,KACAC,EAIE,EAJFA,MAEAC,GAEE,EAHFC,UAGE,EAFFD,cAEE,EADFE,sBAE7D,OACI,mCACI,cAACC,GAAA,EAAD,CAAYC,MAAOL,EACPD,KAAMA,EACNtL,SAAUwL,OCIrBK,GAA0C,SAAC,GAeO,IAdHC,EAcE,EAdFA,mBACAC,EAaE,EAbFA,mBACAC,EAYE,EAZFA,kBACAzC,EAWE,EAXFA,kBACAC,EAUE,EAVFA,gBACAgC,EASE,EATFA,aACAE,EAQE,EARFA,sBACApC,EAOE,EAPFA,MACAI,EAME,EANFA,WACAD,EAKE,EALFA,OACAwC,EAIE,EAJFA,OACAV,EAGE,EAHFA,MACAD,EAEE,EAFFA,KACAG,EACE,EADFA,UAGxD,OACI,mCACI,cAACS,GAAA,EAAD,CAAWC,OAAK,EAACjO,UAAWC,KAAEiO,UAA9B,SACI,eAACC,GAAA,EAAD,CAAMD,WAAS,EAAf,UACI,eAACC,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGrO,UAAWC,KAAEqO,SAA/B,UACI,gCACI,iDAEIP,EACM,cAAC,KAAD,CACEzG,MAAM,YACNN,QAAQ,YACRvF,QAASmM,EAHX,4BAKA,cAAC,KAAD,CAAQtG,MAAM,UACNN,QAAQ,YACRvF,QAASoM,EAFjB,8BAMd,gCACI,iDACA,cAAC,GAAD,UAGR,eAACM,GAAA,EAAD,CAAMC,MAAI,EAACC,GAAI,EAAGrO,UAAWC,KAAEsO,SAA/B,UACI,4CACA,gCACI,cAACxH,GAAA,EAAD,CAAWyH,GAAG,kBAAkBvH,MAAM,SAAShG,KAAK,SAAS+F,QAAS,WAC3DyH,KAAM,UACjB,cAAC,KAAD,CAAQzH,QAAS,YACTM,MAAO,YACPmH,KAAM,QACNhN,QAAS,kBAAMqM,EAAkB,eAHzC,6BAMJ,cAAC,GAAD,CAAW1C,MAAOA,EACPC,kBAAmBA,EACnBC,gBAAiBA,EACjBE,WAAYA,EACZD,OAAQA,IAEnB,cAAC,GAAD,CAAe8B,MAAOA,EACPD,KAAMA,EACNG,UAAWA,EACXD,aAAcA,EACdE,sBAAuBA,eCzDxDpN,GAAWC,IAAMC,OAAO,CAC1BC,QAAS,sCACTC,iBAAiB,IAGRkO,GAAW,SACXC,GACL,OAAOvO,GAASwO,IAAT,cACS,CAACD,OAAO,eAAKA,KACxB7J,MAAK,SAAAC,GAAG,OAAIA,EAAIjC,SAJhB4L,GAAW,SAMZpE,GACJ,OAAOlK,GAASQ,KAAK,cAAe,CAACiO,UAAW,CAAC3K,KAAMoG,KAClDxF,MAAK,SAAAC,GAAG,OAAIA,EAAIjC,SARhB4L,GAAW,SAUTF,GACP,OAAOpO,GAAS6D,OAAT,yBAAkCuK,IACpC1J,MAAK,SAAAC,GAAG,OAAIA,EAAIjC,SAZhB4L,GAAW,SAcHF,EAAYlE,GAAgB,OAAD,oHAC3BlK,GAASgE,IAAI,cAAe,CAACyK,UAAW,CAACpC,IAAK+B,EAAItK,KAAMoG,KAD7B,sFC7C1CwE,GAAY,kBACZC,GAAc,oBACdC,GAAW,iBACXC,GAAiB,uBACjBC,GAAwB,8BAGjBC,GAAiC,CAC1CC,UAAW,CACPC,UAAW,GACXC,oBAAqB,EACrBC,cAAe,EACfC,cAAe,EACfpC,KAAM,EACNG,UAAW,GAEfkC,YAAa,IAkCJC,GAAY,SAACnE,GAAD,MAAqB,CAACtK,KAAM8N,GAAaxD,WACrDoE,GAAU,SAACvC,GAAD,MAAmB,CAACnM,KAAM+N,GAAU5B,SAK9CwC,GAAW,yDAAM,WAAOrN,EAAiCsN,GAAxC,2BAAAjN,EAAA,6DAC1BL,EAASuB,EAAa,YAChB2L,EAAcI,IAAWzE,MAAMqE,YAFX,EAG8BI,IAAWzE,MAAMgE,UAAlEhC,EAHmB,EAGnBA,KAAMG,EAHa,EAGbA,UAAWiC,EAHE,EAGFA,cAAeD,EAHb,EAGaA,cAHb,kBAKCb,GAAkB,CAAClC,QAASiD,EAAalC,YAAWH,OAAM0C,IAAKN,EAAeO,IAAKR,IALpF,OAKhB1M,EALgB,OAMtBN,GAbiB8M,EAaCxM,EAASwM,UAbkB,CAACpO,KAAM6N,GAAWO,eAc/D9M,GAV2ByN,EAUCnN,EAASyM,oBAVc,CAACrO,KAAMiO,GAAuBc,gBAWjFzN,EAASuB,EAAa,YACtB3B,QAAQC,IAAIS,GATU,kDAWtBN,EAASsB,EAAY,KAAEsB,UACvB5C,EAASuB,EAAa,WAZA,kCAHI,IAACkM,EAJVX,IAOK,qBAAN,yDChDXY,GAA+B,WACxC,IAAM7E,EAAQ/I,aAA0C,SAAAf,GAAK,OAAIA,EAAM8J,MAAMgE,UAAUC,aADzC,EAQ1ChN,aAAmC,SAAAf,GAAK,OAAIA,EAAM8J,MAAMgE,aALxDE,EAH0C,EAG1CA,oBAGAlC,GAN0C,EAI1CmC,cAJ0C,EAK1CC,cAL0C,EAM1CpC,MACAG,EAP0C,EAO1CA,UAEE/B,EAAanJ,aAAsC,SAAAf,GAAK,OAAIA,EAAM8J,MAAMqE,eACxE7K,EAAOvC,aAAmC,SAAAf,GAAK,OAAIA,EAAM4O,MAAMtL,QAC/DhB,EAASvB,aAAuC,SAAAf,GAAK,OAAIA,EAAMqG,IAAI/D,UAX3B,EAYlBnB,qBAAW+I,GAZO,mBAYvCuC,EAZuC,KAY/BoC,EAZ+B,KAcxC9C,EAAQ+C,KAAKC,KAAKf,EAAsB/B,GAExChL,EAAWC,cAEjB8N,qBAAU,WACN/N,EAASqN,QACV,CAACrN,IAuCJ,OAAKqB,EAID,cAAC,GAAD,CAAWgK,mBAzCY,WACvBrL,EAASmN,GAAU,KACnBnN,EAASqN,MACTO,GAAU,GACVR,GAAQ,IAsCG9B,mBApCY,WACvBtL,EAASmN,GAAU9K,EAAK6H,MACxBlK,EAASqN,MACTO,GAAU,GACVR,GAAQ,IAiCG7B,kBA/BW,SAACxD,GACvB/H,ED6BkB,SAAC+H,GAAD,8CAAmB,WAAOuF,EAAkCtN,GAAzC,SAAAK,EAAA,6DACzCL,EAASuB,EAAa,YADmB,kBAGd4K,GAAiBpE,GAHH,cAIrC/H,EAASqN,MACTrN,EAASuB,EAAa,YALe,gDAOrCvB,EAASsB,EAAY,KAAEsB,UACvB5C,EAASuB,EAAa,WARe,yDAAnB,wDC7BTyM,CAAWjG,KA+BTe,kBA7BW,SAACmF,GDuCG,IAAChC,ECtC3BjM,GDsC2BiM,ECtCCgC,EDsCiE,SAACjO,GAClGA,EAASuB,EAAa,YACtB,IACqB4K,GAAoBF,GACrCjM,EAASqN,MACTrN,EAASuB,EAAa,YACxB,MAAOb,GACLV,EAASsB,EAAYZ,EAAEkC,UACvB5C,EAASuB,EAAa,gBCjBXwH,gBA3BS,SAACkF,EAAgBlG,GACrC/H,ED+C+B,SAACiM,EAAYlE,GAAb,OAA+B,SAAC/H,GACnEA,EAASuB,EAAa,YACtB,IACI,IAAMjB,EAAW6L,GAAoBF,EAAIlE,GACzC/H,EAASqN,MACTrN,EAASuB,EAAa,YACtB3B,QAAQC,IAAIS,GACd,MAAOI,GACLV,EAASsB,EAAYZ,EAAEkC,UACvB5C,EAASuB,EAAa,aCxDb2M,CAAwBD,EAAQlG,KA2B9BgD,aAzBa,SAACrK,EAA+BjC,GACxDuB,EAASoN,GAAQ3O,IACjBuB,EAASqN,OAwBEpC,sBAtBkB,SAACvK,EAA+CsK,GAC7EhL,EAASqN,OAsBExE,MAAOA,EACPI,WAAYA,EACZuC,OAAQA,EACRxC,OAAQ3G,EAAK6H,IACbY,MAAOA,EACPE,UAAWA,EACXH,KAAMA,IAhBV,cAAC,IAAD,CAAUrL,GAAI,YCvEhB2O,GAAgB,WACzB,OACI,cAAC,GAAD,K,qICMKC,GAAeC,IAAMC,MAAK,SAAUC,GAA+B,IAAD,EAC7CrO,oBAAS,GADoC,mBACtEsO,EADsE,KAC5DC,EAD4D,OAEnDvO,mBAASqO,EAAM9P,OAFoC,mBAEtEA,EAFsE,KAE/D2L,EAF+D,KAe3E,OAAOoE,EACD,cAAChK,GAAA,EAAD,CAAW/F,MAAOA,EAAOc,SALX,SAACmB,GACjB0J,EAAS1J,EAAEC,cAAclC,QAIyBiQ,WAAS,EAACC,OATvC,WACrBF,GAAY,GACZF,EAAMhP,SAASd,MAQb,uBAAMmQ,cAda,WACrBH,GAAY,GACZrE,EAASmE,EAAM9P,QAY0Ba,YAAa,mBAApD,UAAyEiP,EAAM9P,MAA/E,IAAsF,cAAC,KAAD,CAAYoQ,SAAU,UAA5G,UCkCKC,GA9C6B,SAAC,GAOM,EANFC,eAMG,IALHC,EAKE,EALFA,aACAC,EAIE,EAJFA,cACAC,EAGE,EAHFA,UAEA/Q,GACE,EAFFgR,YAEE,EADFhR,OAE7C,OACI,8BACI,eAAC6F,GAAA,EAAD,CAAOE,UAAW,EAAGzG,UAAWC,KAAE0R,MAAlC,UACI,cAACC,GAAA,EAAD,CAAQC,IAAI,SAASC,IAAI,qEACjB9R,UAAWC,KAAEkE,SACrB,eAAC4N,GAAA,EAAD,WACI,eAACC,GAAA,EAAD,CAAU5I,QAAM,EAAhB,UACI,cAAC6I,GAAA,EAAD,UACI,cAAC,KAAD,MAEJ,eAACC,GAAA,EAAD,2BAA2B,4CAE/B,eAACF,GAAA,EAAD,CAAU5I,QAAM,EAAhB,UACI,cAAC6I,GAAA,EAAD,UACI,cAAC,KAAD,MAEJ,eAACC,GAAA,EAAD,2BAA2B,+CAGnC,8BACI,cAACvB,GAAD,CAAc3P,MAAOyQ,EACP3P,SAAUyP,MAI5B,8BACI,+BAAO7Q,MAEX,qBAAKV,UAAWC,KAAEkS,YAAlB,SACI,cAAC,KAAD,CAAQnL,QAAS,WAAYM,MAAO,UAAWtH,UAAWC,KAAEmJ,OACpD3H,QAAS+P,EADjB,+BC7CPY,GAAiC,WAE1C,IAAM7P,EAAWC,cAF+B,GAGlCH,aAAsC,SAAAf,GAAK,OAAIA,EAAM+Q,QAAQ3N,SAC7CrC,aAAmC,SAAAf,GAAK,OAAIA,EAAM+Q,QAAQ5N,gBAAjFP,EAJyC,EAIzCA,KAAMC,EAJmC,EAInCA,OAAQzD,EAJ2B,EAI3BA,MAJ2B,GAKjC2B,aAAuC,SAAAf,GAAK,OAAIA,EAAMqG,IAAI/D,UAC1DvB,aAAiD,SAAAf,GAAK,OAAIA,EAAMqG,IAAIlE,UAE7ChB,mBAAS0B,IARC,mBAQ5BmO,GAR4B,WAUhDhC,qBAAU,WACF/N,EAASsC,OACd,CAACX,IAuBJ,OACI,cAAC,GAAD,CACIuN,UAAWvN,EACXwN,YAAavN,EACbzD,MAAOA,EACP4Q,eAtBoB,SAACiB,GACzBD,EAAeC,IAsBXhB,aAfmB,SAACiB,GACxBjQ,EAAS6C,EAAcoN,KAenBhB,cAZoB,WACxBjP,EAASmD,UC7BF2L,GARW,WACtB,OACI,8BACI,cAAC,GAAD,OCMCrP,GAAO,CAChBC,MAAO,SACPwQ,SAAU,YACV7K,QAAS,WACT8K,MAAO,SACPC,iBAAkB,oBAClB/I,iBAAkB,oBAClBgJ,WAAY,cACZC,KAAK,SAwBMC,GApBiB,WAC5B,OACI,8BACI,eAAC,IAAD,WACI,cAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,OAAQ,kBAAM,cAAC,IAAD,CAAUlR,GAAIC,GAAKC,WACvD,cAAC,IAAD,CAAO+Q,KAAMhR,GAAKC,MAAOgR,OAAQ,kBAAM,cAAC,GAAD,OACvC,cAAC,IAAD,CAAOD,KAAMhR,GAAKyQ,SAAUQ,OAAQ,kBAAM,cAAC,EAAD,OAC1C,cAAC,IAAD,CAAOD,KAAMhR,GAAKyQ,SAAUQ,OAAQ,kBAAM,cAAC,EAAD,OAC1C,cAAC,IAAD,CAAOD,KAAMhR,GAAK4F,QAASqL,OAAQ,kBAAM,cAACC,GAAD,OACzC,cAAC,IAAD,CAAOF,KAAMhR,GAAK2Q,iBAAkBM,OAAQ,kBAAM,cAAC,GAAD,OAClD,cAAC,IAAD,CAAOD,KAAMhR,GAAK4Q,WAAYK,OAAQ,kBAAM,cAAC,GAAD,OAC5C,cAAC,IAAD,CAAOD,KAAMhR,GAAK4H,iBAAkBqJ,OAAQ,kBAAM,cAAC,GAAD,OAClD,cAAC,IAAD,CAAOD,KAAMhR,GAAK6Q,KAAMI,OAAQ,kBAAM,cAAC,EAAD,OACtC,cAAC,IAAD,CAAOA,OAAQ,kBAAM,cAAC,EAAD,a,qBCjBtBE,GAdU,WACrB,OACI,sBAAKnT,UAAWC,KAAEmT,gBAAlB,UACI,cAAC,IAAD,CAASrR,GAAIC,GAAKC,MAAlB,mBACA,cAAC,IAAD,CAASF,GAAIC,GAAKyQ,SAAlB,sBACA,cAAC,IAAD,CAAS1Q,GAAIC,GAAK4F,QAAlB,qBACA,cAAC,IAAD,CAAS7F,GAAIC,GAAK2Q,iBAAlB,8BACA,cAAC,IAAD,CAAS5Q,GAAIC,GAAK4H,iBAAlB,8BACA,cAAC,IAAD,CAAS7H,GAAIC,GAAK4Q,WAAlB,wBACA,cAAC,IAAD,CAAS7Q,GAAIC,GAAK6Q,KAAlB,sBCOGQ,OAbf,WACI,OACI,cAAC,IAAD,UACI,qBAAKrT,UAAW,MAAhB,SACI,eAACgO,GAAA,EAAD,CAAWsF,SAAS,KAApB,UACI,cAAC,GAAD,IACA,cAAC,GAAD,YCALC,GAZS,SAACC,GACnBA,GAAeA,aAAuBC,UACxC,8BAAqB3O,MAAK,YAAkD,IAA/C4O,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,O,SCTRtS,GAAe,G,UCWf6S,GAAcC,aAAgB,CAChCrM,IpCAsB,WAAgG,IAA/FrG,EAA8F,uDAAjEkC,EAAiBjC,EAAgD,uCACrH,OAAQA,EAAON,MACX,KAAKmC,EACD,OAAO,2BAAI9B,GAAX,IAAkBmC,OAAQlC,EAAOkC,SACrC,KAAKJ,EACD,OAAO,2BAAI/B,GAAX,IAAkBoC,aAAcnC,EAAOmC,eAC3C,KAAKJ,EACD,OAAO,2BAAIhC,GAAX,IAAkBqC,eAAgBpC,EAAOoC,iBAC7C,KAAKJ,EACD,OAAO,2BAAKjC,GAAZ,IAAmBsC,OAAQrC,EAAOqC,SACtC,QACI,OAAO,eAAItC,KoCVnB4O,MhCuBwB,WAAwG,IAAvG5O,EAAsG,uDAAvEmE,GAAmBlE,EAAoD,uCAC/H,OAAQA,EAAON,MACX,KAAKuE,EACD,OAAO,2BACAlE,GADP,IAEIsD,KAAMrD,EAAOqD,OAErB,QACI,OAAOtD,IgC9BfgB,SAAUjB,EACVgR,QAAS9M,EACTmE,gB5BFkC,WAA2F,IAA1FpI,EAAyF,uDAA/DJ,GAAcK,EAAiD,uCAC5H,OAAQA,EAAON,MACX,KAAK+G,GAAmB,OAAO,2BAAI1G,GAAX,IAAkB2G,aAAc1G,EAAO0G,eAC/D,KAAK5E,GAAmB,OAAO,2BAAI/B,GAAX,IAAkBoC,aAAcnC,EAAOmC,eAC/D,KAAKJ,GAAqB,OAAO,2BAAIhC,GAAX,IAAkBqC,eAAgBpC,EAAOoC,iBACnE,QAAS,OAAOrC,I4BFpB6I,YAAaU,GACbO,MZOwB,WAAkF,IAAjF9J,EAAgF,uDAAxD6N,GAAgB5N,EAAwC,uCACzG,OAAQA,EAAON,MACX,KAAK6N,GACD,OAAO,2BACAxN,GADP,IACc8N,UAAU,2BACb9N,EAAM8N,WADM,IAEfC,UAAW9N,EAAO8N,cAG9B,KAAKN,GACD,OAAO,2BACAzN,GADP,IAEImO,YAAalO,EAAOgK,SAE5B,KAAKyD,GACD,OAAO,2BAAK1N,GAAZ,IAAmB8N,UAAU,2BAAK9N,EAAM8N,WAAZ,IAAuBhC,KAAM7L,EAAO6L,SAGpE,KAAK6B,GACD,OAAO,2BAAK3N,GAAZ,IAAmB8N,UAAU,2BAAK9N,EAAM8N,WAAZ,IAAuBhC,KAAM7L,EAAOgM,cACpE,KAAK2B,GACD,OAAO,2BAAK5N,GAAZ,IAAmB8N,UAAU,2BAAK9N,EAAM8N,WAAZ,IAAuBE,oBAAqB/N,EAAOyO,eAGnF,QACI,OAAO1O,IY/Bf6E,KDlBuB,WAA6C,IAA5C7E,EAA2C,uDAA9BJ,GAAcK,EAAgB,uCACnE,OAAQA,EAAON,MACX,IAAK,GAGL,QACI,OAAOK,MCeN2S,GAAQC,aAAYH,GAAaI,aAAgBC,OAE9DC,OAAOJ,MAAQA,GChBfK,IAASrB,OACP,cAAC,IAAMsB,WAAP,UACI,cAAC,IAAD,CAAUN,MAAOA,GAAjB,SACI,cAAC,GAAD,QAGRO,SAASC,eAAe,SAM1BlB,M,mBCnBA1T,EAAOC,QAAU,CAAC,IAAM,yBAAyB,KAAO,0BAA0B,KAAO,0BAA0B,MAAQ,2BAA2B,KAAO,0BAA0B,MAAQ,2BAA2B,KAAO,0BAA0B,OAAS,8B,mBCApQD,EAAOC,QAAU,CAAC,WAAa,8BAA8B,WAAa,8BAA8B,MAAQ,2B,mBCAhHD,EAAOC,QAAU,CAAC,MAAQ,uBAAuB,OAAS,wBAAwB,YAAc,6BAA6B,OAAS,0B,mBCAtID,EAAOC,QAAU,CAAC,eAAiB,8BAA8B,cAAgB,6BAA6B,KAAO,sB,mBCArHD,EAAOC,QAAU,CAAC,QAAU,wBAAwB,IAAM,sB,mBCA1DD,EAAOC,QAAU,CAAC,UAAY,mCAAmC,SAAW,kCAAkC,SAAW,oC,mBCAzHD,EAAOC,QAAU,CAAC,KAAO,0B","file":"static/js/main.22721fa9.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"DoubleSlider_slider__38Y75\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__2kMJy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"app\":\"App_app__2Ik4v\"};","import React from 'react';\r\nimport s from './Error404.module.css'\r\n\r\nconst Error404: React.FC = () => {\r\n    return (\r\n        <div className={s.main}>\r\n            404. PAGE NOT FOUND\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;\r\n","import React from 'react';\r\n\r\nconst Test: React.FC = () => {\r\n    return (\r\n        <div>\r\n            TEST PAGE\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n})\r\n\r\n    // http://localhost:7542/2.0/\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post(`auth/register`, {email, password})\r\n    },\r\n\r\n}","import {authAPI} from \"../m3-dall/instance\";\r\n\r\nconst IS_REGISTER = \"AUTH/IS_REGISTER\"\r\nconst IS_ERROR_MESSAGE = \"AUTH/IS_ERROR_MESSAGE\"\r\n\r\nexport const setIsRegister = (value: boolean) => ({type: \"AUTH/IS_REGISTER\", value} as const)\r\n\r\nexport type setIsRegisterACType = ReturnType<typeof setIsRegister>\r\n\r\nexport const setIsErrorMessage = (value: string) => ({type: \"AUTH/IS_ERROR_MESSAGE\", value} as const)\r\n\r\nexport type setIsErrorMessageACType = ReturnType<typeof setIsErrorMessage>\r\n\r\ntype ActionsType = setIsRegisterACType | setIsErrorMessageACType\r\n\r\nexport const registrationThunk = (email: string, password: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await authAPI.registration(email, password);\r\n        dispatch(setIsRegister(true))\r\n        console.log(response)\r\n    } catch (error) {\r\n        dispatch(setIsErrorMessage(error.response.data.error))\r\n    } finally {\r\n        dispatch(setIsRegister(false))\r\n    }\r\n\r\n}\r\n\r\nconst initialState = {\r\n    isRegister: false,\r\n    isErrorMessage: \"\",\r\n};\r\nexport type AuthInitialStateType = typeof initialState;\r\n\r\nexport const registerReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case IS_REGISTER:\r\n            return {...state, isRegister: action.value};\r\n        case IS_ERROR_MESSAGE:\r\n            return {...state, isErrorMessage: action.value};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default registerReducer\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {PATH} from \"../Routes\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ninterface RegisterProps {\r\n    onClick: () => void\r\n    onChangeMail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangePassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    isRegister: boolean\r\n    isErrorMessage: string\r\n    mail: string\r\n    password: string\r\n}\r\n\r\nconst Register: React.FC<RegisterProps> = (\r\n    {\r\n        onClick,\r\n        onChangeMail,\r\n        onChangePassword,\r\n        isRegister,\r\n        isErrorMessage,\r\n        mail,\r\n        password,\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div>\r\n            MY REGISTER PAGE\r\n            <div>\r\n                <div>\r\n                    <input value={mail} type=\"text\" placeholder=\"E-mail\" onChange={onChangeMail}/>\r\n                </div>\r\n                <div>\r\n                    <input value={password} type=\"password\" placeholder=\"Password\" onChange={onChangePassword}/>\r\n                </div>\r\n            </div>\r\n            <button onClick={onClick}>Sign Up</button>\r\n            {isRegister ? <Redirect to={PATH.LOGIN}/> : <div>{isErrorMessage}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationThunk} from \"../../m2-bll/register-reducer\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport Register from \"./Register\";\r\n\r\nconst RegisterContainer: React.FC = () => {\r\n    console.log('render Container')\r\n    let isRegister = useSelector((state: AppRootStateType) => state.register.isRegister)\r\n    let isErrorMessage = useSelector((state: AppRootStateType) => state.register.isErrorMessage)\r\n    const dispatch = useDispatch()\r\n    const [mail, setMail] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n    const onChangeMail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMail(e.currentTarget.value)\r\n    }\r\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n    const onChangeHandler = () => {\r\n        dispatch(registrationThunk(mail, password))\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Register onClick={onChangeHandler}\r\n                      onChangeMail={onChangeMail}\r\n                      onChangePassword={onChangePassword}\r\n                      isRegister={isRegister}\r\n                      isErrorMessage={isErrorMessage}\r\n                      mail={mail}\r\n                      password={password}\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RegisterContainer;\r\n","import React from 'react';\r\nimport RegisterContainer from \"./RegisterContainer\";\r\n\r\n\r\nconst RegisterPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <RegisterContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default RegisterPage;","const SET_STATUS = 'APP/SET-STATUS';\r\nconst SET_ERROR_MESSAGE = 'APP/SET-ERROR-MESSAGE';\r\nconst SET_SUCCESS_MESSAGE = 'APP/SET-SUCCESS-MESSAGE';\r\nconst SET_IS_AUTH = 'APP/SET-IS-AUTH';\r\n\r\nconst AppInitialState: AppInitialStateType = {\r\n    status: 'idle',\r\n    errorMessage: '',\r\n    successMessage:'',\r\n    isAuth: false\r\n}\r\n\r\nexport const appReducer = (state: AppInitialStateType = AppInitialState, action: AppActionsType): AppInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case SET_ERROR_MESSAGE:\r\n            return {...state, errorMessage: action.errorMessage}\r\n        case SET_SUCCESS_MESSAGE:\r\n            return {...state, successMessage: action.successMessage}\r\n        case SET_IS_AUTH:\r\n            return { ...state, isAuth: action.isAuth}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppError = (errorMessage: string) => ({type: SET_ERROR_MESSAGE, errorMessage} as const);\r\nexport const setAppSuccess = (successMessage: string) => ({type: SET_SUCCESS_MESSAGE, successMessage} as const);\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: SET_STATUS, status} as const);\r\nexport const setAppIsAuth = (isAuth: boolean) => ({type: SET_IS_AUTH, isAuth} as const);\r\n\r\n// types\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>;\r\n\r\ntype AppActionsType =\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppSuccess>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppIsAuth>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeed' | 'failed'\r\nexport type AppInitialStateType = {\r\n    status: RequestStatusType\r\n    errorMessage: string\r\n    successMessage: string\r\n    isAuth: boolean\r\n}\r\n","import axios from 'axios';\r\nexport const instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n});\r\n","import {instance} from '../../c1-main/m3-dal/instance';\r\nimport {UserDataType} from './a1-login/login-reducer';\r\n\r\nconst from = 'pvlchkhrv@gmail.com';\r\nconst message = `<div>password recover link: <a href='https://neko-back.herokuapp.com/2.0/set-new-password/$token$'>Link</a></div>`;\r\n\r\nexport const authAPI = {\r\n    ping(){\r\n        return instance.get(`/ping/?frontTime=${Date.now()}`);\r\n    },\r\n    authMe() {\r\n        return instance.post<AuthMeResponseType>('auth/login', {});\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me', {});\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(`auth/register`, {email, password})\r\n    },\r\n    restorePassword(email: string) {\r\n        return instance.post<ResponseType>('/auth/forgot', {email, from, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<ResponseType>('auth/new-password', {password, resetPasswordToken})\r\n    },\r\n    updateProfile(name?: string, avatar?: string) {\r\n        return instance.put<UpdateProfileResponseType>('auth/me', {name, avatar});\r\n    }\r\n}\r\n\r\n//types\r\ntype ResponseType = {\r\n    info: string\r\n    error: string\r\n}\r\ntype AuthMeResponseType = {\r\n    token: string\r\n    tokenDeathTime: Date\r\n    updatedUser: UserDataType\r\n};\r\ntype LoginResponseType = UserDataType;\r\ntype RegisterResponseType = {\r\n    error?: string\r\n};\r\ntype UpdateProfileResponseType = {\r\n    updatedUser: UserDataType\r\n    error?: string\r\n}\r\n","import {Dispatch} from 'redux';\r\nimport {authAPI} from '../authAPI';\r\nimport {setAppError, setAppIsAuth, setAppStatus} from '../../../c1-main/m2-bll/app-reducer';\r\nimport {setAuthUserData, UserDataType} from '../a1-login/login-reducer';\r\n\r\nconst PROFILE_DATA = 'PROFILE_DATA';\r\nconst NEW_PROFILE_NAME = 'NEW_PROFILE_NAME';\r\nconst NEW_PROFILE_AVATAR = 'NEW_PROFILE_AVATAR';\r\n\r\nexport type ChangeDataProfile = {\r\n    updatedUser: UserDataType\r\n    error?: string\r\n}\r\n\r\nexport type ProfileInitialStateType = typeof ProfileInitialState\r\n\r\nconst ProfileInitialState = {\r\n    profileData: {} as UserDataType,\r\n    token: ''\r\n}\r\n\r\nexport const profileReducer = (state: ProfileInitialStateType = ProfileInitialState, action: ProfileActionsType) => {\r\n    switch (action.type) {\r\n        case PROFILE_DATA:\r\n            return {\r\n                ...state,\r\n                profileData: action.user\r\n            }\r\n        case NEW_PROFILE_NAME:\r\n            return {\r\n                ...state,\r\n                profileData: {\r\n                    ...state.profileData, name: action.name\r\n                }\r\n            }\r\n        case NEW_PROFILE_AVATAR:\r\n            return {\r\n                ...state,\r\n                profileData: {\r\n                    ...state.profileData, avatar: action.avatar\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setProfileData = (user: UserDataType) => ({type: PROFILE_DATA, user} as const)\r\nexport const setToken = (token: string) => ({type: PROFILE_DATA, token} as const)\r\nexport const setProfileName = (name: string) => ({type: NEW_PROFILE_NAME, name} as const)\r\nexport const setProfileAvatar = (avatar: string | undefined) => ({type: NEW_PROFILE_AVATAR, avatar} as const)\r\n\r\nexport const authMe = () => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.authMe()\r\n        .then(res => {\r\n            dispatch(setAuthUserData(res.data.updatedUser));\r\n            dispatch(setProfileData(res.data.updatedUser))\r\n            dispatch(setToken(res.data.token))\r\n            dispatch(setAppIsAuth(true))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppError(e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            ))\r\n            dispatch(setAppIsAuth(false))\r\n        })\r\n}\r\n\r\nexport const changeProfile = (name?: string, avatar?:  undefined | string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.updateProfile(name, avatar)\r\n        .then(res => {\r\n            dispatch(setProfileName(res.data.updatedUser.name))\r\n            dispatch(setProfileAvatar(res.data.updatedUser.avatar))\r\n            // dispatch(getAuthUserData)\r\n        })\r\n        .catch(e => {\r\n            dispatch(setAppError(e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            ))\r\n        })\r\n}\r\n// export const changeAvatarProfileTC = (avatar?: string) => {\r\n//     return (dispatch: Dispatch) => {\r\n//         dispatch(setAppStatus('loading'))\r\n//         profileAPI.changeAvatarProfile(avatar)\r\n//             .then(res => {\r\n//                 dispatch(setNewAvatarProfileAC(res.data.updatedUser.avatar))\r\n//             })\r\n//             .catch((e) => {\r\n//                 dispatch(setErrorProfileAC(e.response\r\n//                     ? e.response.data.error\r\n//                     : (e.message + ', more details in the console')\r\n//                 ))\r\n//             })\r\n//             .finally(() => {\r\n//                     dispatch(setAppStatus('succeed'))\r\n//                 }\r\n//             )\r\n//     }\r\n// }\r\n\r\n\r\nexport type ProfileActionsType =\r\n    | ReturnType<typeof setProfileData>\r\n    | ReturnType<typeof setProfileName>\r\n    | ReturnType<typeof setProfileAvatar>\r\n\r\nexport default profileReducer;\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppError, setAppIsAuth, setAppStatus, setAppSuccess} from \"../../../c1-main/m2-bll/app-reducer\";\r\nimport {authAPI} from '../authAPI';\r\nimport {setProfileData} from '../a3-profile/profile-reducer';\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nconst LOGIN_BUTTON_DISABLE = 'LOGIN_BUTTON_DISABLE';\r\nconst LOGOUT = 'LOGOUT';\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\nexport type LoginInitialStateType = typeof LoginInitialState;\r\n\r\nconst LoginInitialState = {\r\n    user: {} as UserDataType | null\r\n};\r\n\r\nexport type LoginActionsType =\r\n    | ReturnType<typeof setAuthUserData>\r\n    | ReturnType<typeof setErrorMessageAC>\r\n    | ReturnType<typeof loginButtonDisableAC>\r\n    | ReturnType<typeof logOutAC>\r\n\r\nexport const loginReducer = (state: LoginInitialStateType = LoginInitialState, action: LoginActionsType): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// ACs\r\nexport const setAuthUserData = (user: UserDataType | null) => ({type: SET_USER_DATA, user}) as const;\r\nexport const setErrorMessageAC = (errorMessage: string | null) => ({type: SET_ERROR_MESSAGE, errorMessage}) as const;\r\nexport const loginButtonDisableAC = (disable: boolean) => ({type: LOGIN_BUTTON_DISABLE, disable}) as const;\r\nexport const logOutAC = (data: string | null) => ({type: LOGOUT, data}) as const;\r\n\r\n// Thunks\r\nexport const getAuthUserData = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(res => {\r\n            dispatch(setAuthUserData(res.data))\r\n            setProfileData(res.data)\r\n            dispatch(setAppStatus('succeed'))\r\n            dispatch(setAppIsAuth(true))\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setAppError(e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            ))\r\n            dispatch(setAppStatus('failed'))\r\n            dispatch(setAppIsAuth(false))\r\n        })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n                dispatch(setAppSuccess(res.data))\r\n                dispatch(setAuthUserData(null))\r\n            }\r\n        )\r\n        .catch((e) => {\r\n            dispatch(setAppError(e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            ))\r\n        })\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport {useFormik} from 'formik';\r\nimport {\r\n    Button,\r\n    Checkbox,\r\n    FormControl,\r\n    FormControlLabel,\r\n    FormGroup,\r\n    FormLabel,\r\n    Paper,\r\n    TextField\r\n} from '@material-ui/core';\r\nimport s from './Login.module.css'\r\n\r\ntype LoginPropsType = {\r\n    onSubmitHandler: (email: string, password: string, rememberMe: boolean) => void\r\n}\r\n\r\nexport const Login: React.FC<LoginPropsType> = ({onSubmitHandler}) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: 'panich2303@gmail.com',\r\n            password: '12345678',\r\n            rememberMe: false,\r\n        },\r\n        validate: values => {\r\n            const errors: FormikErrorType = {};\r\n\r\n            if (!values.email) {\r\n                errors.email = 'Required';\r\n            } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n                errors.email = 'Invalid email address';\r\n            }\r\n\r\n            if (!values.password) {\r\n                errors.password = 'Password is required!';\r\n            } else if (values.password.length < 8) {\r\n                errors.password = 'Must be more than 7 characters'\r\n            }\r\n\r\n            return errors;\r\n        },\r\n        onSubmit: values => {\r\n            onSubmitHandler(values.email, values.password, values.rememberMe);\r\n        },\r\n    });\r\n    return (\r\n        <div className={s.loginContainer}>\r\n            <Paper className={s.formContainer} elevation={3}>\r\n                <form onSubmit={formik.handleSubmit}>\r\n                    <FormControl>\r\n                        <FormLabel>\r\n                            <h3>LOGIN</h3>\r\n                        </FormLabel>\r\n                        <FormGroup className={s.form}>\r\n                            <TextField\r\n                                variant={'outlined'}\r\n                                label=\"Email\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('email')}\r\n                            />\r\n                            {formik.touched.email &&\r\n                            formik.errors.email ? <div style={{color: 'red'}}>{formik.errors.email}</div> : null}\r\n                            <TextField\r\n                                variant={'outlined'}\r\n                                type=\"password\"\r\n                                label=\"Password\"\r\n                                margin=\"normal\"\r\n                                {...formik.getFieldProps('password')}\r\n                            />\r\n                            {formik.touched.password &&\r\n                            formik.errors.password ? <div style={{color: 'red'}}>{formik.errors.password}</div> : null}\r\n                            <FormControlLabel\r\n                                label={'Remember me'}\r\n                                control={\r\n                                    <Checkbox\r\n                                        {...formik.getFieldProps('rememberMe')}/>\r\n                                }\r\n                            />\r\n                            <Button type={'submit'} variant={'contained'} color={'default'}>Log In</Button>\r\n                        </FormGroup>\r\n                    </FormControl>\r\n                </form>\r\n            </Paper>\r\n\r\n        </div>\r\n    );\r\n};\r\n\r\n\r\ntype FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from \"../../../c1-main/m2-bll/store\";\r\nimport {getAuthUserData, setErrorMessageAC} from \"./login-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {AppInitialStateType} from \"../../../c1-main/m2-bll/app-reducer\";\r\nimport {PATH} from \"../../../c1-main/m1-ui/Routes\";\r\nimport {Login} from './Login';\r\n\r\n\r\nconst LoginContainer: React.FC<{}> = () => {\r\n\r\n    const {isAuth, status, errorMessage, successMessage} = useSelector<AppRootStateType, AppInitialStateType>(state => state.app);\r\n    const dispatch = useDispatch();\r\n\r\n    const onSubmitHandler = (email: string, password: string, rememberMe: boolean) => {\r\n        dispatch(getAuthUserData(email, password, rememberMe));\r\n    }\r\n    if(isAuth) {\r\n        return <Redirect to={PATH.PROFILE}/>;\r\n    }\r\n    return (\r\n        <Login onSubmitHandler={onSubmitHandler}/>\r\n    )\r\n}\r\n\r\nexport default LoginContainer;\r\n\r\n","import axios from 'axios';\r\n\r\nexport interface IForgotData {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nconst from = 'pvlchkhrv@gmail.com';\r\nconst message = `<div>password recover link: <a href='https://neko-back.herokuapp.com/2.0/set-new-password/$token$'>Link</a></div>`;\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n});\r\n\r\nexport const restorePasswordAPI = {\r\n    restorePassword(email: string) {\r\n        return instance.post('/auth/forgot', {email, from, message})\r\n    },\r\n    ping(){\r\n        return instance.get(`/ping/?frontTime=${Date.now()}`);\r\n    }\r\n};\r\n","import {restorePasswordAPI} from '../m3-dal/restoreAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {setAppError, setAppStatus} from './app-reducer';\r\n\r\nconst SET_SUCCESS_MESSAGE = 'AUTH/SET-SUCCESS-MESSAGE';\r\nconst SET_ERROR_MESSAGE = 'AUTH/SET-ERROR-MESSAGE';\r\nconst SET_IS_REGISTERED = 'AUTH/SET-IS-REGISTERED';\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    successMessage: '',\r\n    errorMessage: '',\r\n}\r\n\r\nexport const restorePasswordReducer = (state: InitialStateType = initialState, action: RestoreActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_REGISTERED: return {...state, isRegistered: action.isRegistered};\r\n        case SET_ERROR_MESSAGE: return {...state, errorMessage: action.errorMessage};\r\n        case SET_SUCCESS_MESSAGE: return {...state, successMessage: action.successMessage};\r\n        default: return state;\r\n    }\r\n};\r\n\r\n//ACs\r\nexport const setSuccessMessage = (successMessage: string) => ({type: SET_SUCCESS_MESSAGE, successMessage} as const);\r\nexport const setIsRegistered = (isRegistered: boolean) => ({type: SET_IS_REGISTERED, isRegistered} as const);\r\nexport const setErrorMessage = (errorMessage: string) => ({type: SET_ERROR_MESSAGE, errorMessage} as const);\r\n\r\n//Thunks\r\nexport const restorePasswordTC = (email: string) => (dispatch: Dispatch<RestoreActionsType>) => {\r\n    dispatch(setAppStatus('loading'));\r\n    restorePasswordAPI.restorePassword(email)\r\n        .then(res => {\r\n            dispatch(setIsRegistered(true));\r\n            dispatch(setSuccessMessage(res.data.info));\r\n            dispatch(setAppStatus('succeed'));\r\n        })\r\n        .catch((e) => {\r\n            // dispatch(setIsFetching(true));\r\n            dispatch(setAppStatus('failed'));\r\n            dispatch(setAppError(e.message));\r\n            // dispatch(setErrorMessage(e.response.data.error));\r\n            dispatch(setIsRegistered(false))\r\n        })\r\n}\r\nexport const pingServerTC = () => (dispatch: Dispatch<RestoreActionsType>) => {\r\n    restorePasswordAPI.ping()\r\n        .then(res => {\r\n            console.log(res.data);\r\n        })\r\n}\r\n\r\n//Types\r\ntype RestoreActionsType =\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setIsRegistered>\r\n    | ReturnType<typeof setSuccessMessage>\r\n    | ReturnType<typeof setErrorMessage>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './InputText.module.css';\r\n\r\n// ÑÐ¸Ð¿ Ð¿ÑÐ¾Ð¿ÑÐ¾Ð² Ð¾Ð±ÑÑÐ½Ð¾Ð³Ð¾ Ð¸Ð½Ð¿ÑÑÐ°\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// Ð·Ð´ÐµÑÑ Ð¼Ñ Ð³Ð¾Ð²Ð¾ÑÐ¸Ð¼ ÑÑÐ¾ Ñ Ð½Ð°ÑÐµÐ³Ð¾ Ð¸Ð½Ð¿ÑÑÐ° Ð±ÑÐ´ÑÑ ÑÐ°ÐºÐ¸Ðµ Ð¶Ðµ Ð¿ÑÐ¾Ð¿ÑÑ ÐºÐ°Ðº Ñ Ð¾Ð±ÑÑÐ½Ð¾Ð³Ð¾ Ð¸Ð½Ð¿ÑÑÐ°\r\n// (ÑÑÐ¾Ð± Ð½Ðµ Ð¿Ð¸ÑÐ°ÑÑ value: string, onChange: ...; Ð¾Ð½Ð¸ ÑÐ¶Ðµ Ð²ÑÐµ Ð¾Ð¿Ð¸ÑÐ°Ð½Ñ Ð² DefaultInputPropsType)\r\ntype InputTextPropsType = DefaultInputPropsType & { // Ð¸ + ÐµÑÑ Ð¿ÑÐ¾Ð¿ÑÑ ÐºÐ¾ÑÐ¾ÑÑÑ Ð½ÐµÑ Ð² ÑÑÐ°Ð½Ð´Ð°ÑÑÐ½Ð¾Ð¼ Ð¸Ð½Ð¿ÑÑÐµ\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst InputText: React.FC<InputTextPropsType> = (\r\n    {\r\n        type, // Ð´Ð¾ÑÑÐ°ÑÐ¼ Ð¸ Ð¸Ð³Ð½Ð¾ÑÐ¸ÑÑÐµÐ¼ ÑÑÐ¾Ð± Ð½ÐµÐ»ÑÐ·Ñ Ð±ÑÐ»Ð¾ Ð·Ð°Ð´Ð°ÑÑ Ð´ÑÑÐ³Ð¾Ð¹ ÑÐ¸Ð¿ Ð¸Ð½Ð¿ÑÑÐ°\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// Ð²ÑÐµ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ Ð¿Ð¾Ð¿Ð°Ð´ÑÑ Ð² Ð¾Ð±ÑÐµÐºÑ restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // ÐµÑÐ»Ð¸ ÐµÑÑÑ Ð¿ÑÐ¾Ð¿Ñ onChange\r\n        && onChange(e) // ÑÐ¾ Ð¿ÐµÑÐµÐ´Ð°ÑÑ ÐµÐ¼Ñ Ðµ (Ð¿Ð¾ÑÐºÐ¾Ð»ÑÐºÑ onChange Ð½Ðµ Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÐµÐ½)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // ÐµÑÐ»Ð¸ ÐµÑÑÑ Ð¿ÑÐ¾Ð¿Ñ onEnter\r\n        && e.key === 'Enter' // Ð¸ ÐµÑÐ»Ð¸ Ð½Ð°Ð¶Ð°ÑÐ° ÐºÐ½Ð¾Ð¿ÐºÐ° Enter\r\n        && onEnter() // ÑÐ¾ Ð²ÑÐ·Ð²Ð°ÑÑ ÐµÐ³Ð¾\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${s.className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // Ð¾ÑÐ´Ð°ÑÐ¼ Ð¸Ð½Ð¿ÑÑÑ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ ÐµÑÐ»Ð¸ Ð¾Ð½Ð¸ ÐµÑÑÑ (value Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ ÑÐ°Ð¼ Ð²Ð½ÑÑÑÐ¸)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InputText\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './Button.module.css';\r\n\r\n// ÑÐ¸Ð¿ Ð¿ÑÐ¾Ð¿ÑÐ¾Ð² Ð¾Ð±ÑÑÐ½Ð¾Ð¹ ÐºÐ½Ð¾Ð¿ÐºÐ¸, children Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ ÑÑÐ°Ð½Ð¸ÑÑÑÑ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ ÐºÐ½Ð¾Ð¿ÐºÐ¸ ÑÐ°Ð¼ ÑÐ¶Ðµ Ð¾Ð¿Ð¸ÑÐ°Ð½\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst Button: React.FC<ButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// Ð²ÑÐµ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ Ð¿Ð¾Ð¿Ð°Ð´ÑÑ Ð² Ð¾Ð±ÑÐµÐºÑ restProps, ÑÐ°Ð¼ Ð¶Ðµ Ð±ÑÐ´ÐµÑ children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.button} ${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // Ð¾ÑÐ´Ð°ÑÐ¼ ÐºÐ½Ð¾Ð¿ÐºÐµ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ ÐµÑÐ»Ð¸ Ð¾Ð½Ð¸ ÐµÑÑÑ (children ÑÐ°Ð¼ Ð²Ð½ÑÑÑÐ¸)\r\n        />\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React, {ChangeEvent} from 'react';\r\nimport InputText from '../common/input/InputText';\r\nimport Button from '../common/button/Button';\r\n\r\ninterface RestorePasswordFormPropsType {\r\n    onClick: () => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const RestorePasswordForm: React.FC<RestorePasswordFormPropsType> = ({onClick, onChange}) => {\r\n\r\n    return (\r\n        <form onSubmit={onClick}>\r\n            <div>\r\n                <InputText type=\"text\" onChange={onChange}/>\r\n            </div>\r\n            <div>\r\n                <Button type={'submit'}>Restore</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {RequestStatusType} from '../../m2-bll/app-reducer';\r\nimport {RestorePasswordForm} from './RestorePasswordForm';\r\n\r\ninterface IForgotProps {\r\n    onClick: () => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    appStatus: RequestStatusType\r\n    errorMessage: string\r\n    successMessage: string\r\n}\r\n\r\nconst RestorePassword: React.FC<IForgotProps> = (\r\n    {\r\n        onClick,\r\n        onChange,\r\n        appStatus,\r\n        errorMessage,\r\n        successMessage\r\n    }\r\n) => {\r\n    console.log('render PageFrom')\r\n    return (\r\n        <div>\r\n            <h1>Restore Password Page</h1>\r\n            <div>\r\n                <RestorePasswordForm onClick={onClick}\r\n                                     onChange={onChange}\r\n                />\r\n                {appStatus === 'loading' && <div>Loading...</div>}\r\n                {appStatus === 'failed' && <div>{errorMessage}</div>}\r\n                {appStatus === 'succeed' && <div>{successMessage}</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestorePassword;\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {restorePasswordTC} from '../../m2-bll/restore-password-reducer';\r\nimport RestorePassword from './RestorePassword';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../Routes';\r\nimport {RequestStatusType} from '../../m2-bll/app-reducer';\r\n\r\nconst RestorePasswordContainer: React.FC = () => {\r\n    console.log('render Page')\r\n\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.restorePassword.isRegistered);\r\n    const errorMessage = useSelector<AppRootStateType, string>(state => state.restorePassword.errorMessage);\r\n    const successMessage = useSelector<AppRootStateType, string>(state => state.restorePassword.successMessage);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value);\r\n    }\r\n    const onClickHandler = () => {\r\n        dispatch(restorePasswordTC(email));\r\n        setEmail('')\r\n    }\r\n    if (isRegistered) return <Redirect to={PATH.SET_NEW_PASSWORD}/>\r\n    return (\r\n        <div>\r\n            <RestorePassword onClick={onClickHandler}\r\n                             onChange={onChangeHandler}\r\n                             appStatus={appStatus}\r\n                             errorMessage={errorMessage}\r\n                             successMessage={successMessage}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestorePasswordContainer;\r\n","import React from 'react';\r\nimport RestorePasswordContainer from './RestorePasswordContainer';\r\n\r\nconst RestorePasswordPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <RestorePasswordContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default RestorePasswordPage;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\n// import {Simulate} from \"react-dom/test-utils\";\r\n// import error = Simulate.error;\r\nimport InputText from \"../common/input/InputText\";\r\nimport Button from '../common/button/Button';\r\nimport s from './NewPassword.module.css';\r\nimport chrome from '../common/images/chrome.jpg'\r\n\r\ntype NewPasswordPropsType = {\r\n    error: string\r\n    isChecked: boolean\r\n    requestStatus: RequestStatusType\r\n    onChangeNewPassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onSubmit: () => void\r\n    viewPassword: () => void\r\n    newPassword: string\r\n}\r\n\r\nconst NewPassword: React.FC<NewPasswordPropsType> = ({\r\n                                                         error, isChecked, requestStatus,\r\n                                                         onChangeNewPassword, onSubmit, viewPassword, newPassword\r\n                                                     }) => {\r\n\r\n    return (\r\n        <div className={s.set}>\r\n            <div className={s.card}>\r\n                {/*<img className={s.logo} src={chrome} alt=\"logo\"/>*/}\r\n\r\n                <h2 className={s.title}>Create new password</h2>\r\n\r\n                <form className={s.form}>\r\n\r\n                    <div className={s.error}>\r\n                        {error && <span>{error}</span>}\r\n                        {requestStatus === \"loading\" && <span>loading...</span>}\r\n                    </div>\r\n                    <InputText\r\n                        type={isChecked ? \"text\" : \"password\"}\r\n                        onChange={onChangeNewPassword}\r\n                        placeholder={\"Password\"}\r\n                        value={newPassword}\r\n                    />\r\n                    <span onClick={viewPassword}>View password</span>\r\n                    <div>\r\n                        <span className={s.text}> Create new password and we will send you further instructions to email</span>\r\n                    </div>\r\n\r\n                    <Button\r\n                        disabled={requestStatus === \"loading\"}\r\n                        className={s.button}\r\n                        onClick={onSubmit}>Create new password\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPassword;\r\n","import axios from \"axios\";\r\n\r\nexport const inctance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const newPasswordAPI = {\r\n    newPassword(password: string, resetPassword: string) {\r\n        return inctance.post('auth/new-password', {password, resetPassword})\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {newPasswordAPI} from \"../m3-dal/newPasswordAPI\";\r\n\r\nexport type SetPasswordActionType = ReturnType<typeof setErrorMessagedAC> | ReturnType<typeof isSuccessfulAC>\r\nexport type SetPasswordInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    error: '',\r\n    isSuccessful: false\r\n};\r\n\r\nexport const newPasswordReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case 'SET-ERROR-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            };\r\n        }\r\n        case 'IS-SUCCESSFUL': {\r\n            return {\r\n                ...state,\r\n                isSuccessful: action.isSuccessful\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setErrorMessagedAC = (error: string) => ({type: 'SET-ERROR-MESSAGE', error} as const)\r\nexport const isSuccessfulAC = (isSuccessful: boolean) => ({type: 'IS-SUCCESSFUL', isSuccessful} as const)\r\n\r\nexport const setNewPasswordTC = (newPassword: string , resetPassword: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    return newPasswordAPI.newPassword(newPassword, resetPassword)\r\n        .then(response => {\r\n            dispatch(isSuccessfulAC(true))\r\n            dispatch(setAppStatus('succeed'))\r\n        }).catch(e => {\r\n            dispatch(setErrorMessagedAC(e.response.data.error))\r\n            dispatch(setAppStatus('failed'))\r\n        })\r\n}\r\n\r\nexport default newPasswordReducer;\r\n","import NewPassword from \"./NewPassword\";\r\nimport {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setNewPasswordTC} from \"../../m2-bll/new-password-reducer\";\r\n\r\nexport const NewPasswordContainer = () => {\r\n\r\n    const [newPassword, setNewPassword] = useState(\"\")\r\n    const [isChecked, setIsChek] = useState(false)\r\n\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string>(state => state.newPassword.error)\r\n    const isSuccessful = useSelector<AppRootStateType, boolean>(state => state.newPassword.isSuccessful)\r\n\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeNewPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewPassword(e.currentTarget.value)\r\n    }\r\n    const viewPassword = () => {\r\n        setIsChek(!isChecked)\r\n    }\r\n    const onSubmit = () => {\r\n        dispatch(setNewPasswordTC(newPassword, token))\r\n    }\r\n\r\n    if (isSuccessful) {\r\n        return <Redirect to={'PATH.LOGIN'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NewPassword\r\n                error={error}\r\n                isChecked={isChecked}\r\n                requestStatus={requestStatus}\r\n                onChangeNewPassword={onChangeNewPassword}\r\n                onSubmit={onSubmit}\r\n                viewPassword={viewPassword}\r\n                newPassword={newPassword}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from '@material-ui/core';\r\nimport {PackType} from '../../m2-bll/cardPacks-reducer';\r\n\r\ntype DataTablePropsType = {\r\n    packs: PackType []\r\n    deletePackHandler: (packId: string) => void\r\n    editPackHandler: (packId: string, title: string) => void\r\n    packUserId: string\r\n    userId: string\r\n}\r\n\r\nexport const DataTable: React.FC<DataTablePropsType> = ({\r\n                                                            packs,\r\n                                                            deletePackHandler,\r\n                                                            editPackHandler,\r\n                                                            packUserId,\r\n                                                            userId\r\n                                                        }) => {\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper}>\r\n                <Table className={'classes.table'} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell><b>Title</b></TableCell>\r\n                            <TableCell align=\"center\">Cards</TableCell>\r\n                            <TableCell align=\"center\">Updated</TableCell>\r\n                            <TableCell align=\"center\">Created</TableCell>\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {packs.map((pack) => (\r\n                            <TableRow key={pack._id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {pack.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">{pack.cardsCount}</TableCell>\r\n                                <TableCell align=\"center\">{pack.updated}</TableCell>\r\n                                <TableCell align=\"center\">{pack.created}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    {\r\n                                        userId === pack.user_id\r\n                                            ? <div>\r\n                                                <Button onClick={() => deletePackHandler(pack._id)}>Delete</Button>\r\n                                                <Button\r\n                                                    onClick={() => editPackHandler(pack._id, 'PAVEL PACK edited')}>Edit</Button>\r\n                                                <Button onClick={() => {\r\n                                                }}>Learn</Button>\r\n                                            </div>\r\n\r\n                                            : <Button onClick={() => {\r\n                                            }}>Learn</Button>\r\n                                    }\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Slider} from '@material-ui/core';\r\nimport s from './DoubleSlider.module.css'\r\n\r\nexport const DoubleSlider = () => {\r\n    function valuetext(value: number) {\r\n        return `${value}Â°C`;\r\n    }\r\n\r\n    // const classes = useStyles();\r\n    const [value, setValue] = useState<number[]>([20, 37]);\r\n\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        setValue(newValue as number[]);\r\n    };\r\n\r\n    return (\r\n        <div className={s.slider}>\r\n            <Slider\r\n                value={value}\r\n                onChange={handleChange}\r\n                // min={}\r\n                // max={}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Pagination} from '@material-ui/lab';\r\n\r\ntype PaginationPropsType = {\r\n    pages: number\r\n    page: number\r\n    pageCount: number\r\n    onChangePage: (e: React.ChangeEvent<unknown>, page: number) => void\r\n    onChangeItemsQuantity: (e: React.ChangeEventHandler<HTMLInputElement>, pageCount: number) => void\r\n}\r\n\r\nexport const PaginationBar: React.FC<PaginationPropsType> = ({\r\n                                                                 page,\r\n                                                                 pages,\r\n                                                                 pageCount,\r\n                                                                 onChangePage,\r\n                                                                 onChangeItemsQuantity\r\n                                                             }) => {\r\n    return (\r\n        <>\r\n            <Pagination count={pages}\r\n                        page={page}\r\n                        onChange={onChangePage}/>\r\n        </>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Button, ButtonGroup, Container, Grid, TextField,} from '@material-ui/core';\r\nimport s from './CardPackagePage.module.css'\r\nimport {DataTable} from './DataTable';\r\nimport {DoubleSlider} from './DoubleSlider';\r\nimport {PaginationBar} from './PaginationBar';\r\nimport {PackType} from '../../m2-bll/cardPacks-reducer';\r\n\r\ntype CardPacksPropsType = {\r\n    getAllPacksHandler: () => void\r\n    getUserPackHandler: () => void\r\n    createPackHandler: (title: string) => void\r\n    deletePackHandler: (packId: string) => void\r\n    editPackHandler: (packId: string, title: string) => void\r\n    onChangePage: (e: React.ChangeEvent<unknown>, page: number) => void\r\n    onChangeItemsQuantity: (e: React.ChangeEventHandler<HTMLInputElement>, pageCount: number) => void\r\n    packs: PackType[]\r\n    packUserId: string\r\n    userId: string\r\n    isMine: boolean\r\n    pages: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\n\r\nexport const CardPacks: React.FC<CardPacksPropsType> = ({\r\n                                                            getAllPacksHandler,\r\n                                                            getUserPackHandler,\r\n                                                            createPackHandler,\r\n                                                            deletePackHandler,\r\n                                                            editPackHandler,\r\n                                                            onChangePage,\r\n                                                            onChangeItemsQuantity,\r\n                                                            packs,\r\n                                                            packUserId,\r\n                                                            userId,\r\n                                                            isMine,\r\n                                                            pages,\r\n                                                            page,\r\n                                                            pageCount\r\n                                                        }) => {\r\n\r\n    return (\r\n        <>\r\n            <Container fixed className={s.container}>\r\n                <Grid container>\r\n                    <Grid item xs={3} className={s.settings}>\r\n                        <div>\r\n                            <h5>Show Card Packs</h5>\r\n                            {\r\n                                isMine\r\n                                    ? <Button\r\n                                        color=\"secondary\"\r\n                                        variant='contained'\r\n                                        onClick={getAllPacksHandler}\r\n                                    >Show All Packs</Button>\r\n                                    : <Button color=\"primary\"\r\n                                              variant='contained'\r\n                                              onClick={getUserPackHandler}\r\n                                    >Show My Packs</Button>\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            <h5>Number Of Cards</h5>\r\n                            <DoubleSlider/>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={9} className={s.packList}>\r\n                        <h3>Packs List</h3>\r\n                        <div>\r\n                            <TextField id=\"standard-search\" label=\"Search\" type=\"search\" variant={'outlined'}\r\n                                       size={'small'}/>\r\n                            <Button variant={'contained'}\r\n                                    color={'secondary'}\r\n                                    size={'large'}\r\n                                    onClick={() => createPackHandler('PAVEL PACK')}\r\n                            >Add New Pack</Button>\r\n                        </div>\r\n                        <DataTable packs={packs}\r\n                                   deletePackHandler={deletePackHandler}\r\n                                   editPackHandler={editPackHandler}\r\n                                   packUserId={packUserId}\r\n                                   userId={userId}\r\n                        />\r\n                        <PaginationBar pages={pages}\r\n                                       page={page}\r\n                                       pageCount={pageCount}\r\n                                       onChangePage={onChangePage}\r\n                                       onChangeItemsQuantity={onChangeItemsQuantity}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n","import axios from 'axios';\r\nimport {PackType} from '../m2-bll/cardPacks-reducer';\r\n\r\n\r\nexport type GetPacksDataType = {\r\n    cardPacks: PackType[];\r\n    cardPacksTotalCount: number\r\n    error: string;\r\n}\r\nexport type PacksPostDataType = {\r\n    cardPacks: {\r\n        name: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: false\r\n        type?: string\r\n    }\r\n};\r\n\r\nexport type PacksParamsType = {\r\n    packName?: 'PAVEL PACK'\r\n    min?: number\r\n    max?: number\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n    sortPacks?: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n});\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: PacksParamsType) {\r\n        return instance.get<GetPacksDataType>\r\n        (`/cards/pack`, {params: {...params}})\r\n            .then(res => res.data);\r\n    },\r\n    addPack(title: string) {\r\n        return instance.post('/cards/pack', {cardsPack: {name: title}})\r\n            .then(res => res.data);\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n            .then(res => res.data);\r\n    },\r\n    async updatePack(id: string, title: string) {\r\n        return await instance.put('/cards/pack', {cardsPack: {_id: id, name: title}});\r\n    }\r\n};\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {setAppError, setAppStatus} from './app-reducer';\r\nimport {packsAPI, PacksParamsType} from '../m3-dal/cardsPackAPI';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppRootStateType} from './store';\r\n\r\nconst SET_PACKS = 'PACKS/SET-PACKS';\r\nconst SET_USER_ID = 'PACKS/SET-USER-ID';\r\nconst SET_PAGE = 'PACKS/SET-PAGE';\r\nconst SET_PAGE_COUNT = 'PACKS/SET-PAGE-COUNT';\r\nconst SET_PACKS_TOTAL_COUNT = 'PACKS/SET-PACKS-TOTAL-COUNT';\r\n\r\n\r\nexport const PacksInitState: PacksStateType = {\r\n    packsData: {\r\n        cardPacks: [],\r\n        cardPacksTotalCount: 0,\r\n        maxCardsCount: 0,\r\n        minCardsCount: 0,\r\n        page: 1,\r\n        pageCount: 5\r\n    },\r\n    packUser_id: '',\r\n};\r\n\r\nexport const packsReducer = (state: PacksStateType = PacksInitState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case SET_PACKS:\r\n            return {\r\n                ...state, packsData: {\r\n                    ...state.packsData,\r\n                    cardPacks: action.cardPacks,\r\n                }\r\n            };\r\n        case SET_USER_ID:\r\n            return {\r\n                ...state,\r\n                packUser_id: action.userId\r\n            };\r\n        case SET_PAGE:{\r\n            return { ...state, packsData: {...state.packsData, page: action.page} };\r\n        }\r\n\r\n        case SET_PAGE_COUNT:\r\n            return { ...state, packsData: {...state.packsData, page: action.pageCount} }\r\n        case SET_PACKS_TOTAL_COUNT:\r\n            return { ...state, packsData: {...state.packsData, cardPacksTotalCount: action.totalCount} }\r\n        // case SET_MIN_MAX:\r\n        //     return { ...state, packsData: {...state.packsData, minCardsCount: action.totalCount} }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ACs\r\nexport const setPacks = (cardPacks: PackType []) => ({type: SET_PACKS, cardPacks} as const);\r\nexport const setUserId = (userId: string) => ({type: SET_USER_ID, userId} as const);\r\nexport const setPage = (page: number) => ({type: SET_PAGE, page} as const);\r\nexport const setPageCount = (pageCount: number) => ({type: SET_PAGE_COUNT, pageCount} as const);\r\nexport const setPacksTotalCount = (totalCount: number) => ({type: SET_PACKS_TOTAL_COUNT, totalCount} as const);\r\n\r\n//Thunks\r\nexport const getPacks = () => async (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatus('loading'));\r\n    const packUser_id = getState().packs.packUser_id;\r\n    const {page, pageCount, minCardsCount, maxCardsCount} = getState().packs.packsData\r\n    try {\r\n        const response = await packsAPI.getPacks({user_id: packUser_id, pageCount, page, min: minCardsCount, max: maxCardsCount});\r\n        dispatch(setPacks(response.cardPacks));\r\n        dispatch(setPacksTotalCount(response.cardPacksTotalCount));\r\n        dispatch(setAppStatus('succeed'));\r\n        console.log(response);\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n};\r\n\r\nexport const createPack = (title: string) => async (getState: () => AppRootStateType, dispatch: Dispatch<any>) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        const response = await packsAPI.addPack(title);\r\n        dispatch(getPacks());\r\n        dispatch(setAppStatus('succeed'));\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n};\r\n\r\nexport const deletePackOnServer = (id: string): ThunkAction<void, AppRootStateType, unknown, any> => (dispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        const response = packsAPI.deletePack(id);\r\n        dispatch(getPacks());\r\n        dispatch(setAppStatus('succeed'));\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n}\r\n\r\nexport const updatePackTitleOnServer = (id: string, title: string) => (dispatch: Dispatch<any>) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        const response = packsAPI.updatePack(id, title);\r\n        dispatch(getPacks());\r\n        dispatch(setAppStatus('succeed'));\r\n        console.log(response);\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n}\r\n\r\n//Types\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setPacks>\r\n    | ReturnType<typeof setUserId>\r\n    | ReturnType<typeof setPage>\r\n    | ReturnType<typeof setPageCount>\r\n    | ReturnType<typeof setPacksTotalCount>\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string // Ð¿Ð°Ð¿ÐºÐ°\t,\r\n    cardsCount: number\r\n    grade: number // ÑÑÐµÐ´Ð½ÑÑ Ð¾ÑÐµÐ½ÐºÐ° ÐºÐ°ÑÑÐ¾ÑÐµÐº\r\n    shots: number // ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿Ð¾Ð¿ÑÑÐ¾Ðº\t\t\tÐ¿ÑÐ¸Ð²Ð°ÑÐ½ÑÐµ ÐºÐ¾Ð»Ð¾Ð´Ñ Ð±ÑÐ´ÑÑ\r\n    rating: number // Ð»Ð°Ð¹ÐºÐ¸\tÑÐ¾Ð»ÑÐºÐ¾ ÐµÑÐ»Ð¸ ÑÐºÐ°Ð·Ð°ÑÑ ÑÐ²Ð¾Ð¹\r\n    type: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n};\r\nexport type PacksStateType = {\r\n    packsData: {\r\n        cardPacks: PackType [],\r\n        cardPacksTotalCount: number,\r\n        maxCardsCount: number,\r\n        minCardsCount: number,\r\n        page: number,\r\n        pageCount: number\r\n    },\r\n    packUser_id: string,\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {CardPacks} from './CardPacks';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {\r\n    createPack,\r\n    deletePackOnServer,\r\n    getPacks,\r\n    PackType, setPage,\r\n    setUserId,\r\n    updatePackTitleOnServer\r\n} from '../../m2-bll/cardPacks-reducer';\r\n\r\nexport const CardPacksContainer: React.FC = () => {\r\n    const packs = useSelector<AppRootStateType, PackType[]>(state => state.packs.packsData.cardPacks);\r\n    const {\r\n        cardPacksTotalCount,\r\n        maxCardsCount,\r\n        minCardsCount,\r\n        page,\r\n        pageCount\r\n    } = useSelector<AppRootStateType, any>(state => state.packs.packsData);\r\n    const packUserId = useSelector<AppRootStateType, string>(state => state.packs.packUser_id);\r\n    const user = useSelector<AppRootStateType, any>(state => state.login.user);\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.app.isAuth);\r\n    const [isMine, setIsMine] = useState(!!packUserId);\r\n    // const {params} = useParams();\r\n    const pages = Math.ceil(cardPacksTotalCount / pageCount);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacks());\r\n    }, [dispatch]);\r\n\r\n    const getAllPacksHandler = () => {\r\n        dispatch(setUserId(''));\r\n        dispatch(getPacks());\r\n        setIsMine(false);\r\n        setPage(1);\r\n    }\r\n    const getUserPackHandler = () => {\r\n        dispatch(setUserId(user._id));\r\n        dispatch(getPacks());\r\n        setIsMine(true);\r\n        setPage(1);\r\n    }\r\n    const createPackHandler = (title: string) => {\r\n        dispatch(createPack(title));\r\n    }\r\n    const deletePackHandler = (packId: string) => {\r\n        dispatch(deletePackOnServer(packId));\r\n    }\r\n    const editPackHandler = (packId: string, title: string) => {\r\n        dispatch(updatePackTitleOnServer(packId, title))\r\n    }\r\n    const onChangePageHandler = (e: React.ChangeEvent<unknown>, value: number) => {\r\n        dispatch(setPage(value));\r\n        dispatch(getPacks());\r\n    }\r\n    const onChangePageCountHandler = (e: React.ChangeEventHandler<HTMLInputElement>, pageCount: number) => {\r\n        dispatch(getPacks());\r\n    }\r\n\r\n    const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n    }\r\n\r\n    const onChangeSliderHandler = (e: any, newValue: number | number[]) => {\r\n\r\n    }\r\n\r\n    if (!isAuth) {\r\n        return <Redirect to={'/login'}/>\r\n    }\r\n    return (\r\n        <CardPacks getAllPacksHandler={getAllPacksHandler}\r\n                   getUserPackHandler={getUserPackHandler}\r\n                   createPackHandler={createPackHandler}\r\n                   deletePackHandler={deletePackHandler}\r\n                   editPackHandler={editPackHandler}\r\n                   onChangePage={onChangePageHandler}\r\n                   onChangeItemsQuantity={onChangePageCountHandler}\r\n                   packs={packs}\r\n                   packUserId={packUserId}\r\n                   isMine={isMine}\r\n                   userId={user._id}\r\n                   pages={pages}\r\n                   pageCount={pageCount}\r\n                   page={page}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {CardPacksContainer} from './CardPacksContainer';\r\n\r\nexport const CardPacksPage = () => {\r\n    return (\r\n        <CardPacksContainer/>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {ChangeEvent, useState} from 'react';\r\nimport {TextField} from '@material-ui/core';\r\nimport CreateIcon from '@material-ui/icons/Create';\r\n\r\ntype EditableSpanPropsType = {\r\n    value: string\r\n    onChange: (newValue: string) => void\r\n    // onBlur: (name: string) => void\r\n}\r\n\r\nexport const EditableSpan = React.memo(function (props: EditableSpanPropsType) {\r\n    let [editMode, setEditMode] = useState(false);\r\n    let [value, setValue] = useState(props.value);\r\n    const activateEditMode = () => {\r\n        setEditMode(true);\r\n        setValue(props.value);\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false);\r\n        props.onChange(value);\r\n    }\r\n    const changeValue = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n\r\n    return editMode\r\n        ? <TextField value={value} onChange={changeValue} autoFocus onBlur={activateViewMode} />\r\n        : <span onDoubleClick={activateEditMode} placeholder={'Type here please'}>{props.value} <CreateIcon fontSize={'small'}/> </span>\r\n});\r\n","import React from 'react';\r\nimport {Avatar, Button, List, ListItem, ListItemIcon, ListItemText, Paper} from '@material-ui/core';\r\nimport PagesIcon from '@material-ui/icons/Pages';\r\nimport LayersIcon from '@material-ui/icons/Layers';\r\nimport s from './Profile.module.css'\r\nimport {EditableSpan} from '../../../c1-main/m1-ui/common/editable-span/EditableSpan';\r\n\r\ntype ProfilePropsType = {\r\n    nameValue: string\r\n    avatarValue?: string\r\n    onAvatarChange: (avatarLink: string) => void\r\n    onNameChange: (newName: string) => void\r\n    onLogoutClick: () => void\r\n    email: string\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({\r\n                                                 onAvatarChange,\r\n                                                 onNameChange,\r\n                                                 onLogoutClick,\r\n                                                 nameValue,\r\n                                                 avatarValue,\r\n                                                 email\r\n                                             }) => {\r\n    return (\r\n        <div>\r\n            <Paper elevation={3} className={s.paper}>\r\n                <Avatar alt=\"avatar\" src=\"https://images.aif.by/007/594/329095c44e514d3e3c8719ca8a623340.jpg\"\r\n                        className={s.avatar}/>\r\n                <List>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <PagesIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText>Total Packs: <span>10</span></ListItemText>\r\n                    </ListItem>\r\n                    <ListItem button>\r\n                        <ListItemIcon>\r\n                            <LayersIcon/>\r\n                        </ListItemIcon>\r\n                        <ListItemText>Total Cards: <span>20</span></ListItemText>\r\n                    </ListItem>\r\n                </List>\r\n                <div>\r\n                    <EditableSpan value={nameValue}\r\n                                  onChange={onNameChange}\r\n                                  // onBlur={onNameChange}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <span>{email}</span>\r\n                </div>\r\n                <div className={s.buttonGroup}>\r\n                    <Button variant={'outlined'} color={'primary'} className={s.button}\r\n                            onClick={onLogoutClick}> Log Out </Button>\r\n                    {/*<Button variant={'outlined'} color={'secondary'} className={s.button} onCLick={}>Cancel </Button>*/}\r\n                </div>\r\n            </Paper>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, {useEffect, useState} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../c1-main/m2-bll/store\";\r\nimport {logOutTC} from \"../a1-login/login-reducer\";\r\nimport {RequestStatusType} from \"../../../c1-main/m2-bll/app-reducer\";\r\nimport {authMe, changeProfile} from './profile-reducer';\r\n\r\nexport const ProfileContainer: React.FC<{}> = () => {\r\n    debugger\r\n    const dispatch = useDispatch();\r\n    const token = useSelector<AppRootStateType, string>(state => state.profile.token)\r\n    const {name, avatar, email} = useSelector<AppRootStateType, any>(state => state.profile.profileData)\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.app.isAuth)\r\n    const status = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    // const [nameValue, setNameValue] = useState(name);\r\n    const [avatarValue, setAvatarValue] = useState(avatar);\r\n\r\n    useEffect(() => {\r\n            dispatch(authMe());\r\n    }, [name])\r\n\r\n    // if (!isAuth) {\r\n    //     return <Redirect to={PATH.LOGIN}/>\r\n    // }\r\n\r\n    const changeAvatarHandler = (avatarLink: string) => {\r\n        setAvatarValue(avatarLink)\r\n    }\r\n\r\n    // const onChangeProfileName = (newName: string) => {\r\n    //     setNameValue(newName)\r\n    // }\r\n\r\n    const onChangeNameHandler= (newName: string) => {\r\n        dispatch(changeProfile(newName));\r\n    }\r\n\r\n    const onLogoutClickHandler= () => {\r\n        dispatch(logOutTC());\r\n    }\r\n\r\n\r\n    return (\r\n        <Profile\r\n            nameValue={name}\r\n            avatarValue={avatar}\r\n            email={email}\r\n            onAvatarChange={changeAvatarHandler}\r\n            onNameChange={onChangeNameHandler}\r\n            onLogoutClick={onLogoutClickHandler}\r\n        />\r\n    )\r\n}\r\n","import {ProfileContainer} from '../../../c2-features/f1-auth/a3-profile/ProfileContainer';\r\n\r\nconst Profile: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <ProfileContainer/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport Error404 from './404/Error404';\r\nimport Test from './test/Test';\r\nimport RegisterPage from \"./registration/RegisterPage\";\r\nimport LoginContainer from \"../../c2-features/f1-auth/a1-login/LoginContainer\";\r\nimport RestorePasswordPage from \"./restore-password/RestorePasswordPage\";\r\nimport {NewPasswordContainer} from \"./new-password/NewPasswordContainer\";\r\nimport {CardPacksPage} from './cardPacks/Ð¡ardPacksPage';\r\nimport ProfilePage from './profile/ProfilePage';\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    PROFILE: '/profile',\r\n    ERROR: '/error',\r\n    RESTORE_PASSWORD: '/restore-password',\r\n    SET_NEW_PASSWORD: '/set-new-password',\r\n    CARD_PACKS: '/card-packs',\r\n    TEST:'/test'\r\n\r\n}\r\n\r\nexport const Routes: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <Redirect to={PATH.LOGIN}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <RegisterPage/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <RegisterPage/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <ProfilePage/>}/>\r\n                <Route path={PATH.RESTORE_PASSWORD} render={() => <RestorePasswordPage/>}/>\r\n                <Route path={PATH.CARD_PACKS} render={() => <CardPacksPage/>}/>\r\n                <Route path={PATH.SET_NEW_PASSWORD} render={() => <NewPasswordContainer/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../Routes';\r\nimport s from './Header.module.css';\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <div className={s.headerContainer}>\r\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER}>Register</NavLink>\r\n            <NavLink to={PATH.PROFILE}>Profile</NavLink>\r\n            <NavLink to={PATH.RESTORE_PASSWORD}>Restore Password</NavLink>\r\n            <NavLink to={PATH.SET_NEW_PASSWORD}>Set New Password</NavLink>\r\n            <NavLink to={PATH.CARD_PACKS}>Card Packs</NavLink>\r\n            <NavLink to={PATH.TEST}>Demo</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './App.module.css';\r\nimport Header from './header/Header';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport Routes from './Routes';\r\nimport {Container} from '@material-ui/core';\r\nimport s from './App.module.css';\r\n\r\nfunction App() {\r\n    return (\r\n        <HashRouter>\r\n            <div className={'App'}>\r\n                <Container maxWidth='xl'>\r\n                    <Header/>\r\n                    <Routes/>\r\n                </Container>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {};\r\nexport const testReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case '': {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {LoginActionsType, loginReducer} from '../../c2-features/f1-auth/a1-login/login-reducer';\r\nimport {registerReducer} from './register-reducer';\r\nimport {restorePasswordReducer} from './restore-password-reducer';\r\nimport {newPasswordReducer} from './new-password-reducer';\r\nimport {testReducer} from './test-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {packsReducer} from './cardPacks-reducer';\r\nimport profileReducer from '../../c2-features/f1-auth/a3-profile/profile-reducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    packs: packsReducer,\r\n    test: testReducer\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport type AppRootActionsType =\r\n    | LoginActionsType\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './c1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './c1-main/m2-bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"set\":\"NewPassword_set__1hXhM\",\"card\":\"NewPassword_card__2kGUu\",\"logo\":\"NewPassword_logo__2hSg8\",\"title\":\"NewPassword_title__4dKqr\",\"form\":\"NewPassword_form__3rso2\",\"error\":\"NewPassword_error__3b2o6\",\"text\":\"NewPassword_text__1LRlN\",\"button\":\"NewPassword_button__2GyWU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"InputText_superInput__2h3wO\",\"errorInput\":\"InputText_errorInput__3F9WG\",\"error\":\"InputText_error__2lDLV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"paper\":\"Profile_paper__2alTe\",\"avatar\":\"Profile_avatar__3tpG6\",\"buttonGroup\":\"Profile_buttonGroup__2D1vv\",\"button\":\"Profile_button__1ksiA\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loginContainer\":\"Login_loginContainer__1uJ6p\",\"formContainer\":\"Login_formContainer__3vOkr\",\"form\":\"Login_form__Uvl91\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3_qLI\",\"red\":\"Button_red__3mhUf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CardPackagePage_container__3-yoB\",\"settings\":\"CardPackagePage_settings__2tFZ5\",\"packList\":\"CardPackagePage_packList__21jdy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Error404_main__1s_FQ\"};"],"sourceRoot":""}