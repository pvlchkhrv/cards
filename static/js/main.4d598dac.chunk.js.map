{"version":3,"sources":["c1-main/m1-ui/header/Header.module.css","c1-main/m1-ui/404/Error404.tsx","c1-main/m1-ui/test/Test.tsx","c1-main/m3-dall/instance.ts","c1-main/m2-bll/register-reducer.ts","c1-main/m1-ui/registration/Register.tsx","c1-main/m1-ui/registration/RegisterContainer.tsx","c1-main/m1-ui/registration/RegisterPage.tsx","c1-main/m1-ui/common/input/InputText.tsx","c1-main/m1-ui/common/checkbox/Checkbox.tsx","c1-main/m1-ui/common/button/Button.tsx","c1-main/m1-ui/login/Login.tsx","c1-main/m2-bll/app-reducer.ts","c1-main/m3-dal/profileAPI.tsx","c1-main/m3-dal/instance.ts","c1-main/m3-dal/authAPI.ts","c1-main/m2-bll/profile-reducer.ts","c1-main/m2-bll/login-reducer.ts","c1-main/m1-ui/login/LoginContainer.tsx","c1-main/m3-dal/restoreAPI.ts","c1-main/m2-bll/restore-password-reducer.ts","c1-main/m1-ui/restore-password/RestorePasswordForm.tsx","c1-main/m1-ui/restore-password/RestorePassword.tsx","c1-main/m1-ui/restore-password/RestorePasswordContainer.tsx","c1-main/m1-ui/restore-password/RestorePasswordPage.tsx","c1-main/m1-ui/new-password/NewPassword.tsx","c1-main/m3-dal/newPasswordAPI.tsx","c1-main/m2-bll/new-password-reducer.ts","c1-main/m1-ui/new-password/NewPasswordContainer.tsx","c1-main/m1-ui/profile/Profile.tsx","c1-main/m1-ui/profile/ProfileContainer.tsx","c1-main/m1-ui/cardPacks/DataTable.tsx","c1-main/m1-ui/cardPacks/DoubleSlider.tsx","c1-main/m1-ui/cardPacks/PaginationBar.tsx","c1-main/m1-ui/cardPacks/CardPacks.tsx","c1-main/m3-dal/cardsPackAPI.ts","c1-main/m2-bll/cardPacks-reducer.ts","c1-main/m1-ui/cardPacks/CardPacksContainer.tsx","c1-main/m1-ui/cardPacks/Ð¡ardPacksPage.tsx","c1-main/m3-dal/cardsAPI.tsx","c1-main/m2-bll/cards-reducer.ts","c1-main/m1-ui/cards/SortButtons.tsx","c1-main/m1-ui/cards/Table.tsx","c1-main/m1-ui/cards/Paginator.tsx","c1-main/m1-ui/cards/CardsPageContainer.tsx","c1-main/m1-ui/cards/CardsPage.tsx","c1-main/m1-ui/Routes.tsx","c1-main/m1-ui/header/Header.tsx","c1-main/m1-ui/App.tsx","reportWebVitals.ts","c1-main/m2-bll/test-reducer.ts","c1-main/m2-bll/store.ts","index.tsx","c1-main/m1-ui/cards/CardsPage.module.css","c1-main/m1-ui/new-password/NewPassword.module.css","c1-main/m1-ui/login/Login.module.css","c1-main/m1-ui/common/input/InputText.module.css","c1-main/m1-ui/common/button/Button.module.css","c1-main/m1-ui/cardPacks/CardPackagePage.module.css","c1-main/m1-ui/common/checkbox/Checkbox.module.css","c1-main/m1-ui/profile/Profile.module.css","c1-main/m1-ui/404/Error404.module.css","c1-main/m1-ui/cardPacks/DoubleSlider.module.css"],"names":["module","exports","Error404","className","s","main","Test","instance","axios","create","baseURL","withCredentials","authAPI","email","password","post","IS_REGISTER","IS_ERROR_MESSAGE","setIsRegister","value","type","initialState","isRegister","isErrorMessage","registerReducer","state","action","Register","onClick","onChangeMail","onChangePassword","mail","placeholder","onChange","to","PATH","LOGIN","RegisterContainer","console","log","useSelector","register","dispatch","useDispatch","useState","setMail","setPassword","a","response","data","error","registrationThunk","e","currentTarget","RegisterPage","InputText","onChangeText","onKeyPress","onEnter","spanClassName","restProps","finalSpanClassName","finalInputClassName","input","errorInput","superInput","key","Checkbox","onChangeChecked","children","checkbox","checked","Button","red","finalClassName","button","default","Login","props","login","title","isAuth","errorMessage","form","onChangeEmailHandler","onChangePasswordHandler","onChangeRememberMeHandler","disabled","loginButtonDisable","loginBtn","addUserData","reg","REGISTER","SET_STATUS","SET_ERROR","SET_IS_AUTH","status","setAppError","setAppStatus","setAppIsAuth","profileAPI","avatar","put","name","rememberMe","delete","PROFILE_DATA","ERROR_MESSAGE","NEW_NAME_PROFILE","NEW_AVATAR_PROFILE","ProfileInitialState","profileData","profileReducer","setErrorProfileAC","changeNameProfileTC","then","res","setNewNameProfileAC","updatedUser","catch","message","finally","changeAvatarProfileTC","setNewAvatarProfileAC","SET_USER_DATA","SET_ERROR_MESSAGE","LOGIN_BUTTON_DISABLE","LOGOUT","LoginInitialState","user","logOutInfo","setAuthUserDataAC","setErrorMessageAC","loginButtonDisableAC","disable","logOutTC","LoginContainer","loading","app","setEmail","setRememberMe","useEffect","PROFILE","newEmail","newPassword","getAuthUserData","preloader","restorePasswordAPI","from","SET_SUCCESS_MESSAGE","SET_IS_REGISTERED","isRegistered","successMessage","setIsRegistered","restorePasswordTC","info","RestorePasswordForm","onSubmit","RestorePassword","appStatus","RestorePasswordContainer","restorePassword","SET_NEW_PASSWORD","RestorePasswordPage","NewPassword","isChecked","requestStatus","onChangeNewPassword","viewPassword","set","card","text","inctance","newPasswordAPI","resetPassword","isSuccessful","newPasswordReducer","NewPasswordContainer","setNewPassword","setIsChek","token","useParams","setNewPasswordTC","Profile","auth","editMode","changeAvatarHandler","changeNameInputFocus","switchEditMode","onChangeNewNameHandler","logOut","setNewName","src","dataUser","autoFocus","onBlur","onDoubleClick","ProfileContainer","setEditMode","setName","created","newName","DataTable","packs","deletePackHandler","editPackHandler","userId","packUserId","TableContainer","component","Paper","Table","aria-label","TableHead","TableRow","TableCell","align","TableBody","map","pack","scope","cardsCount","updated","user_id","_id","DoubleSlider","setValue","slider","Slider","event","newValue","valueLabelDisplay","aria-labelledby","getAriaValueText","PaginationBar","page","pages","onChangePage","pageCount","onChangeItemsQuantity","Pagination","count","CardPacks","getAllPacksHandler","getUserPackHandler","createPackHandler","isMine","Container","fixed","container","Grid","item","xs","settings","color","variant","packList","TextField","id","label","size","packsAPI","params","get","cardsPack","SET_PACKS","SET_USER_ID","SET_PAGE","SET_PAGE_COUNT","SET_PACKS_TOTAL_COUNT","PacksInitState","packsData","cardPacks","cardPacksTotalCount","maxCardsCount","minCardsCount","packUser_id","setUserId","setPage","getPacks","getState","min","max","totalCount","CardPacksContainer","setIsMine","Math","ceil","createPack","packId","updatePackTitleOnServer","CardPacksPage","cardsAPI","cardQuestion","sortCards","cardId","cardsPack_id","SET_CARDS","SET_QUESTION","SET_SORT_TYPE","SET_NUMBER_PAGE","cardsData","cards","answer","question","grade","rating","shots","__v","cardsTotalCount","maxGrade","minGrade","searchValue","sort","setSortType","sortType","getCardsThunk","cardsReducer","SortButtons","sortUpClick","sortDownClick","IconButton","fontSize","TableData","onDeleteClickHandler","onUpdateClickHandler","cardsObj","table","Paginator","handleChangePage","handleChangeRowsPerPage","TablePagination","rowsPerPageOptions","rowsPerPage","onChangeRowsPerPage","CardsPageContainer","cardPackID","maxWidth","search","addButton","newPage","setNumberPage","setPageCount","target","CardsPage","ERROR","RESTORE_PASSWORD","CARDS","CARD_PACKS","TEST","Routes","exact","path","render","Header","headerContainer","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","rootReducer","combineReducers","profile","test","store","createStore","applyMiddleware","thunk","window","ReactDOM","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4d598dac.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"headerContainer\":\"Header_headerContainer__2kMJy\"};","import React from 'react';\r\nimport s from './Error404.module.css'\r\n\r\nconst Error404: React.FC = () => {\r\n    return (\r\n        <div className={s.main}>\r\n            404. PAGE NOT FOUND\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Error404;\r\n","import React from 'react';\r\n\r\nconst Test: React.FC = () => {\r\n    return (\r\n        <div>\r\n            TEST PAGE\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Test;\r\n","import axios from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: \"https://neko-back.herokuapp.com/2.0\",\r\n    withCredentials: true,\r\n})\r\n// https://neko-back.herokuapp.com/2.0\r\n    // http://localhost:7542/2.0/\r\nexport const authAPI = {\r\n    registration(email: string, password: string) {\r\n        return instance.post(`auth/register`, {email, password},)\r\n    },\r\n\r\n}","import {authAPI} from \"../m3-dall/instance\";\r\n\r\nconst IS_REGISTER = \"AUTH/IS_REGISTER\"\r\nconst IS_ERROR_MESSAGE = \"AUTH/IS_ERROR_MESSAGE\"\r\n\r\nexport const setIsRegister = (value: boolean) => ({type: \"AUTH/IS_REGISTER\", value} as const)\r\n\r\nexport type setIsRegisterACType = ReturnType<typeof setIsRegister>\r\n\r\nexport const setIsErrorMessage = (value: string) => ({type: \"AUTH/IS_ERROR_MESSAGE\", value} as const)\r\n\r\nexport type setIsErrorMessageACType = ReturnType<typeof setIsErrorMessage>\r\n\r\ntype ActionsType = setIsRegisterACType | setIsErrorMessageACType\r\n\r\nexport const registrationThunk = (email: string, password: string) => async (dispatch: any) => {\r\n    try {\r\n        let response = await authAPI.registration(email, password);\r\n        dispatch(setIsRegister(true))\r\n        console.log(response)\r\n    } catch (error) {\r\n        dispatch(setIsErrorMessage(error.response.data.error))\r\n    } finally {\r\n        dispatch(setIsRegister(false))\r\n    }\r\n\r\n}\r\n\r\nconst initialState = {\r\n    isRegister: false,\r\n    isErrorMessage: \"\",\r\n};\r\nexport type AuthInitialStateType = typeof initialState;\r\n\r\nexport const registerReducer = (state: AuthInitialStateType = initialState, action: ActionsType): AuthInitialStateType => {\r\n    switch (action.type) {\r\n        case IS_REGISTER:\r\n            return {...state, isRegister: action.value};\r\n        case IS_ERROR_MESSAGE:\r\n            return {...state, isErrorMessage: action.value};\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default registerReducer\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {PATH} from \"../Routes\";\r\nimport {Redirect} from 'react-router-dom';\r\n\r\ninterface RegisterProps {\r\n    onClick: () => void\r\n    onChangeMail: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangePassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    isRegister: boolean\r\n    isErrorMessage: string\r\n    mail: string\r\n    password: string\r\n}\r\n\r\nconst Register: React.FC<RegisterProps> = (\r\n    {\r\n        onClick,\r\n        onChangeMail,\r\n        onChangePassword,\r\n        isRegister,\r\n        isErrorMessage,\r\n        mail,\r\n        password,\r\n    }\r\n) => {\r\n\r\n    return (\r\n        <div>\r\n            MY REGISTER PAGE\r\n            <div>\r\n                <div>\r\n                    <input value={mail} type=\"text\" placeholder=\"E-mail\" onChange={onChangeMail}/>\r\n                </div>\r\n                <div>\r\n                    <input value={password} type=\"password\" placeholder=\"Password\" onChange={onChangePassword}/>\r\n                </div>\r\n            </div>\r\n            <button onClick={onClick}>Sign Up</button>\r\n            {isRegister ? <Redirect to={PATH.LOGIN}/> : <div>{isErrorMessage}</div>}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Register;\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {registrationThunk} from \"../../m2-bll/register-reducer\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport Register from \"./Register\";\r\n\r\nconst RegisterContainer: React.FC = () => {\r\n    console.log('render Container')\r\n    let isRegister = useSelector((state: AppRootStateType) => state.register.isRegister)\r\n    let isErrorMessage = useSelector((state: AppRootStateType) => state.register.isErrorMessage)\r\n    const dispatch = useDispatch()\r\n    const [mail, setMail] = useState<string>(\"\")\r\n    const [password, setPassword] = useState<string>(\"\")\r\n    const onChangeMail = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setMail(e.currentTarget.value)\r\n    }\r\n    const onChangePassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setPassword(e.currentTarget.value)\r\n    }\r\n    const onChangeHandler = () => {\r\n        dispatch(registrationThunk(mail, password))\r\n\r\n    }\r\n    return (\r\n        <div>\r\n            <Register onClick={onChangeHandler}\r\n                      onChangeMail={onChangeMail}\r\n                      onChangePassword={onChangePassword}\r\n                      isRegister={isRegister}\r\n                      isErrorMessage={isErrorMessage}\r\n                      mail={mail}\r\n                      password={password}\r\n            />\r\n        </div>\r\n    )\r\n}\r\nexport default RegisterContainer;","import React from 'react';\r\nimport RegisterContainer from \"./RegisterContainer\";\r\n\r\n\r\nconst RegisterPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <RegisterContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default RegisterPage;","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes, KeyboardEvent} from 'react'\r\nimport s from './InputText.module.css';\r\n\r\n// ÑÐ¸Ð¿ Ð¿ÑÐ¾Ð¿ÑÐ¾Ð² Ð¾Ð±ÑÑÐ½Ð¾Ð³Ð¾ Ð¸Ð½Ð¿ÑÑÐ°\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\n// Ð·Ð´ÐµÑÑ Ð¼Ñ Ð³Ð¾Ð²Ð¾ÑÐ¸Ð¼ ÑÑÐ¾ Ñ Ð½Ð°ÑÐµÐ³Ð¾ Ð¸Ð½Ð¿ÑÑÐ° Ð±ÑÐ´ÑÑ ÑÐ°ÐºÐ¸Ðµ Ð¶Ðµ Ð¿ÑÐ¾Ð¿ÑÑ ÐºÐ°Ðº Ñ Ð¾Ð±ÑÑÐ½Ð¾Ð³Ð¾ Ð¸Ð½Ð¿ÑÑÐ°\r\n// (ÑÑÐ¾Ð± Ð½Ðµ Ð¿Ð¸ÑÐ°ÑÑ value: string, onChange: ...; Ð¾Ð½Ð¸ ÑÐ¶Ðµ Ð²ÑÐµ Ð¾Ð¿Ð¸ÑÐ°Ð½Ñ Ð² DefaultInputPropsType)\r\ntype InputTextPropsType = DefaultInputPropsType & { // Ð¸ + ÐµÑÑ Ð¿ÑÐ¾Ð¿ÑÑ ÐºÐ¾ÑÐ¾ÑÑÑ Ð½ÐµÑ Ð² ÑÑÐ°Ð½Ð´Ð°ÑÑÐ½Ð¾Ð¼ Ð¸Ð½Ð¿ÑÑÐµ\r\n    onChangeText?: (value: string) => void\r\n    onEnter?: () => void\r\n    error?: string\r\n    spanClassName?: string\r\n}\r\n\r\nconst InputText: React.FC<InputTextPropsType> = (\r\n    {\r\n        type, // Ð´Ð¾ÑÑÐ°ÑÐ¼ Ð¸ Ð¸Ð³Ð½Ð¾ÑÐ¸ÑÑÐµÐ¼ ÑÑÐ¾Ð± Ð½ÐµÐ»ÑÐ·Ñ Ð±ÑÐ»Ð¾ Ð·Ð°Ð´Ð°ÑÑ Ð´ÑÑÐ³Ð¾Ð¹ ÑÐ¸Ð¿ Ð¸Ð½Ð¿ÑÑÐ°\r\n        onChange, onChangeText,\r\n        onKeyPress, onEnter,\r\n        error,\r\n        className, spanClassName,\r\n\r\n        ...restProps// Ð²ÑÐµ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ Ð¿Ð¾Ð¿Ð°Ð´ÑÑ Ð² Ð¾Ð±ÑÐµÐºÑ restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange // ÐµÑÐ»Ð¸ ÐµÑÑÑ Ð¿ÑÐ¾Ð¿Ñ onChange\r\n        && onChange(e) // ÑÐ¾ Ð¿ÐµÑÐµÐ´Ð°ÑÑ ÐµÐ¼Ñ Ðµ (Ð¿Ð¾ÑÐºÐ¾Ð»ÑÐºÑ onChange Ð½Ðµ Ð¾Ð±ÑÐ·Ð°ÑÐµÐ»ÐµÐ½)\r\n\r\n        onChangeText && onChangeText(e.currentTarget.value)\r\n    }\r\n    const onKeyPressCallback = (e: KeyboardEvent<HTMLInputElement>) => {\r\n        onKeyPress && onKeyPress(e);\r\n\r\n        onEnter // ÐµÑÐ»Ð¸ ÐµÑÑÑ Ð¿ÑÐ¾Ð¿Ñ onEnter\r\n        && e.key === 'Enter' // Ð¸ ÐµÑÐ»Ð¸ Ð½Ð°Ð¶Ð°ÑÐ° ÐºÐ½Ð¾Ð¿ÐºÐ° Enter\r\n        && onEnter() // ÑÐ¾ Ð²ÑÐ·Ð²Ð°ÑÑ ÐµÐ³Ð¾\r\n    }\r\n\r\n    const finalSpanClassName = `${s.error} ${spanClassName ? spanClassName : ''}`\r\n    const finalInputClassName = `${s.input} ${error ? s.errorInput : s.superInput} ${s.className}` // need to fix with (?:) and s.superInput\r\n\r\n    return (\r\n        <>\r\n            <input\r\n                type={'text'}\r\n                onChange={onChangeCallback}\r\n                onKeyPress={onKeyPressCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // Ð¾ÑÐ´Ð°ÑÐ¼ Ð¸Ð½Ð¿ÑÑÑ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ ÐµÑÐ»Ð¸ Ð¾Ð½Ð¸ ÐµÑÑÑ (value Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ ÑÐ°Ð¼ Ð²Ð½ÑÑÑÐ¸)\r\n            />\r\n            {error && <span className={finalSpanClassName}>{error}</span>}\r\n        </>\r\n    )\r\n}\r\n\r\nexport default InputText\r\n","import React, {ChangeEvent, DetailedHTMLProps, InputHTMLAttributes} from 'react'\r\nimport s from './Checkbox.module.css'\r\n\r\n// ÑÐ¸Ð¿ Ð¿ÑÐ¾Ð¿ÑÐ¾Ð² Ð¾Ð±ÑÑÐ½Ð¾Ð³Ð¾ Ð¸Ð½Ð¿ÑÑÐ°\r\ntype DefaultInputPropsType = DetailedHTMLProps<InputHTMLAttributes<HTMLInputElement>, HTMLInputElement>\r\n\r\ntype CheckboxPropsType = DefaultInputPropsType & {\r\n    onChangeChecked?: (checked: boolean) => void\r\n    spanClassName?: string\r\n}\r\n\r\nconst Checkbox: React.FC<CheckboxPropsType> = (\r\n    {\r\n        type, // Ð´Ð¾ÑÑÐ°ÑÐ¼ Ð¸ Ð¸Ð³Ð½Ð¾ÑÐ¸ÑÑÐµÐ¼ ÑÑÐ¾Ð± Ð½ÐµÐ»ÑÐ·Ñ Ð±ÑÐ»Ð¾ Ð·Ð°Ð´Ð°ÑÑ Ð´ÑÑÐ³Ð¾Ð¹ ÑÐ¸Ð¿ Ð¸Ð½Ð¿ÑÑÐ°\r\n        onChange, onChangeChecked,\r\n        className, spanClassName,\r\n        children, // Ð² ÑÑÑ Ð¿ÐµÑÐµÐ¼ÐµÐ½Ð½ÑÑ Ð¿Ð¾Ð¿Ð°Ð´ÑÑ ÑÐµÐºÑÑ, ÑÐ¸Ð¿Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°ÑÑ Ð½Ðµ Ð½ÑÐ¶Ð½Ð¾ ÑÐ°Ðº ÐºÐ°Ðº Ð¾Ð½ Ð·Ð°ÑÐ¸Ð¿Ð¸Ð·Ð¸ÑÐ¾Ð²Ð°Ð½ Ð² React.FC\r\n\r\n        ...restProps// Ð²ÑÐµ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ Ð¿Ð¾Ð¿Ð°Ð´ÑÑ Ð² Ð¾Ð±ÑÐµÐºÑ restProps\r\n    }\r\n) => {\r\n    const onChangeCallback = (e: ChangeEvent<HTMLInputElement>) => {\r\n        onChange && onChange(e);\r\n\r\n        onChangeChecked && onChangeChecked(e.currentTarget.checked);\r\n    }\r\n\r\n    const finalInputClassName = `${s.checkbox} ${className ? className : ''}`\r\n\r\n    return (\r\n        <label>\r\n            <input\r\n                type={'checkbox'}\r\n                onChange={onChangeCallback}\r\n                className={finalInputClassName}\r\n\r\n                {...restProps} // Ð¾ÑÐ´Ð°ÑÐ¼ Ð¸Ð½Ð¿ÑÑÑ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ ÐµÑÐ»Ð¸ Ð¾Ð½Ð¸ ÐµÑÑÑ (checked Ð½Ð°Ð¿ÑÐ¸Ð¼ÐµÑ ÑÐ°Ð¼ Ð²Ð½ÑÑÑÐ¸)\r\n            />\r\n            {children && <span className={s.spanClassName}>{children}</span>}\r\n        </label> // Ð±Ð»Ð°Ð³Ð¾Ð´Ð°ÑÑ label Ð½Ð°Ð¶Ð°ÑÐ¸Ðµ Ð½Ð° ÑÐ¿Ð°Ð½ Ð¿ÐµÑÐµÐ´Ð°ÑÑÑÑ Ð² Ð¸Ð½Ð¿ÑÑ\r\n    )\r\n}\r\n\r\nexport default Checkbox\r\n","import React, {ButtonHTMLAttributes, DetailedHTMLProps} from 'react';\r\nimport s from './Button.module.css';\r\n\r\n// ÑÐ¸Ð¿ Ð¿ÑÐ¾Ð¿ÑÐ¾Ð² Ð¾Ð±ÑÑÐ½Ð¾Ð¹ ÐºÐ½Ð¾Ð¿ÐºÐ¸, children Ð² ÐºÐ¾ÑÐ¾ÑÐ¾Ð¼ ÑÑÐ°Ð½Ð¸ÑÑÑÑ Ð½Ð°Ð·Ð²Ð°Ð½Ð¸Ðµ ÐºÐ½Ð¾Ð¿ÐºÐ¸ ÑÐ°Ð¼ ÑÐ¶Ðµ Ð¾Ð¿Ð¸ÑÐ°Ð½\r\ntype DefaultButtonPropsType = DetailedHTMLProps<ButtonHTMLAttributes<HTMLButtonElement>, HTMLButtonElement>\r\n\r\ntype ButtonPropsType = DefaultButtonPropsType & {\r\n    red?: boolean\r\n}\r\n\r\nconst Button: React.FC<ButtonPropsType> = (\r\n    {\r\n        red, className,\r\n        ...restProps// Ð²ÑÐµ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ Ð¿Ð¾Ð¿Ð°Ð´ÑÑ Ð² Ð¾Ð±ÑÐµÐºÑ restProps, ÑÐ°Ð¼ Ð¶Ðµ Ð±ÑÐ´ÐµÑ children\r\n    }\r\n) => {\r\n    const finalClassName = `${s.button} ${red ? s.red : s.default} ${className}`\r\n\r\n    return (\r\n        <button\r\n            className={finalClassName}\r\n            {...restProps} // Ð¾ÑÐ´Ð°ÑÐ¼ ÐºÐ½Ð¾Ð¿ÐºÐµ Ð¾ÑÑÐ°Ð»ÑÐ½ÑÐµ Ð¿ÑÐ¾Ð¿ÑÑ ÐµÑÐ»Ð¸ Ð¾Ð½Ð¸ ÐµÑÑÑ (children ÑÐ°Ð¼ Ð²Ð½ÑÑÑÐ¸)\r\n        />\r\n    )\r\n}\r\n\r\nexport default Button\r\n","import React, {ChangeEvent} from 'react';\r\nimport InputText from \"../common/input/InputText\";\r\nimport Checkbox from \"../common/checkbox/Checkbox\";\r\nimport Button from \"../common/button/Button\";\r\nimport {LoginInitialStateType} from \"../../m2-bll/login-reducer\";\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\nimport s from './Login.module.css'\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from \"../Routes\";\r\n\r\ntype LoginPropsType = {\r\n    title: string\r\n    onChangeEmailHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onChangePasswordHandler: (e: ChangeEvent<HTMLInputElement>) => void\r\n    addUserData: () => void\r\n    onChangeRememberMeHandler: any         //(e: ChangeEvent<HTMLInputElement>) => void\r\n    isAuth: LoginInitialStateType\r\n    preloader: RequestStatusType\r\n}\r\n\r\nconst Login: React.FC<LoginPropsType> = (props) => {\r\n    return (\r\n        <div className={s.login}>\r\n            <h2 className={s.title}> LOGIN </h2>\r\n            <span className={s.error}>{props.isAuth.errorMessage}</span>\r\n            <form className={s.form}>\r\n                <div>\r\n                    <InputText type={'email'}\r\n                               onChange={props.onChangeEmailHandler}\r\n                               placeholder={'Email'}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <InputText type={'password'}\r\n                               onChange={props.onChangePasswordHandler}\r\n                               placeholder={'Password'}\r\n                    />\r\n                </div>\r\n                <div>\r\n                    <Checkbox type={'checkbox'}\r\n                              onChangeChecked={props.onChangeRememberMeHandler}>remember me\r\n                    </Checkbox>\r\n                </div>\r\n                <div>\r\n                    <Button disabled={props.isAuth.loginButtonDisable}\r\n                            className={s.loginBtn}\r\n                            onClick={props.addUserData}>Submit</Button>\r\n                </div>\r\n            </form>\r\n            <div>\r\n                <NavLink className={s.reg} to={PATH.REGISTER}>Sign up</NavLink>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Login;\r\n","const SET_STATUS = 'APP/SET-STATUS';\r\nconst SET_ERROR = 'APP/SET-ERROR';\r\nconst SET_IS_AUTH = 'APP/SET-IS-AUTH';\r\n\r\nconst initialState: InitialStateType = {\r\n    status: 'idle',\r\n    error: '',\r\n    isAuth: false\r\n}\r\n\r\nexport const appReducer = (state: InitialStateType = initialState, action: AppActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_STATUS:\r\n            return {...state, status: action.status}\r\n        case SET_ERROR:\r\n            return {...state, error: action.error}\r\n        case SET_IS_AUTH:\r\n            return { ...state, isAuth: action.isAuth}\r\n        default:\r\n            return {...state}\r\n    }\r\n}\r\n\r\nexport const setAppError = (error: string) => ({type: SET_ERROR, error} as const);\r\nexport const setAppStatus = (status: RequestStatusType) => ({type: SET_STATUS, status} as const);\r\nexport const setAppIsAuth = (isAuth: boolean) => ({type: SET_IS_AUTH, isAuth} as const);\r\n\r\n// types\r\nexport type SetAppErrorActionType = ReturnType<typeof setAppError>;\r\nexport type SetAppStatusActionType = ReturnType<typeof setAppStatus>;\r\n\r\ntype AppActionsType =\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setAppIsAuth>\r\n\r\nexport type RequestStatusType = 'idle' | 'loading' | 'succeed' | 'failed'\r\nexport type InitialStateType = {\r\n    status: RequestStatusType\r\n    error: string\r\n    isAuth: boolean\r\n}\r\n","import {instance} from \"../m3-dall/instance\";\r\nimport {ChangeDataProfile, ProfileDataType} from \"../m2-bll/profile-reducer\";\r\n\r\nexport const profileAPI = {\r\n    authProfileData() {\r\n        return instance.post<ProfileDataType>(`auth/me`, {})\r\n    },\r\n    changeAvatarProfile(avatar?: string) {\r\n        return instance.put<ChangeDataProfile>(`auth/me`, {avatar})\r\n    },\r\n    changeNameProfile(name: string) {\r\n        return instance.put<ChangeDataProfile>(`auth/me`, {name})\r\n    },\r\n};\r\n","import axios from 'axios';\r\nexport const instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n});\r\n","import {instance} from './instance';\r\nimport {UserDataType} from '../m2-bll/login-reducer';\r\n\r\nconst from = 'pvlchkhrv@gmail.com';\r\nconst message = `<div>password recover link: <a href='https://neko-back.herokuapp.com/2.0/set-new-password/$token$'>Link</a></div>`;\r\n\r\nexport const authAPI = {\r\n    ping(){\r\n        return instance.get(`/ping/?frontTime=${Date.now()}`);\r\n    },\r\n    authMe() {\r\n        return instance.post<AuthMeResponseType>('auth/login', {});\r\n    },\r\n    login(email: string, password: string, rememberMe: boolean) {\r\n        return instance.post<LoginResponseType>('auth/login', {email, password, rememberMe});\r\n    },\r\n    logout() {\r\n        return instance.delete('auth/me', {});\r\n    },\r\n    register(email: string, password: string) {\r\n        return instance.post<RegisterResponseType>(`auth/register`, {email, password})\r\n    },\r\n    restorePassword(email: string) {\r\n        return instance.post<ResponseType>('/auth/forgot', {email, from, message})\r\n    },\r\n    setNewPassword(password: string, resetPasswordToken: string) {\r\n        return instance.post<ResponseType>('auth/new-password', {password, resetPasswordToken})\r\n    },\r\n    updateProfile(name: string, avatar?: string) {\r\n        return instance.put<UpdateProfileResponseType>('auth/me', {name, avatar});\r\n    }\r\n}\r\n\r\n//types\r\ntype ResponseType = {\r\n    info: string\r\n    error: string;\r\n}\r\ntype AuthMeResponseType = {\r\n    _id: string;\r\n    email: string;\r\n    name: string;\r\n    avatar?: string;\r\n    publicCardPacksCount: number; // ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ ÐºÐ¾Ð»Ð¾Ð´\r\n    created: Date;\r\n    updated: Date;\r\n    isAdmin: boolean;\r\n    verified: boolean; // Ð¿Ð¾Ð´ÑÐ²ÐµÑÐ´Ð¸Ð» Ð»Ð¸ Ð¿Ð¾ÑÑÑ\r\n    rememberMe: boolean;\r\n    error?: string;\r\n};\r\ntype LoginResponseType = UserDataType;\r\ntype RegisterResponseType = {\r\n    error?: string;\r\n};\r\ntype UpdateProfileResponseType = {\r\n    updatedUser: UserDataType\r\n    error?: string\r\n}\r\n","import {profileAPI} from \"../m3-dal/profileAPI\";\r\nimport {Dispatch} from \"redux\";\r\nimport {setAuthUserDataAC} from \"./login-reducer\";\r\nimport {setAppIsAuth, setAppStatus} from \"./app-reducer\";\r\nimport {authAPI} from '../m3-dal/authAPI';\r\n\r\nconst PROFILE_DATA = 'PROFILE_DATA';\r\nconst ERROR_MESSAGE = 'ERROR_MESSAGE';\r\nconst NEW_NAME_PROFILE = 'NEW_NAME_PROFILE';\r\nconst NEW_AVATAR_PROFILE = 'NEW_AVATAR_PROFILE';\r\n\r\nexport type ProfileDataType = {\r\n    created: Date\r\n    avatar?: string\r\n    email: string\r\n    isAdmin: boolean\r\n    name: string\r\n    publicCardPacksCount: number\r\n    rememberMe: boolean\r\n    token: string\r\n    tokenDeathTime: number\r\n    updated: Date\r\n    verified: boolean\r\n    __v: number\r\n    _id: string\r\n}\r\nexport type ChangeDataProfile = {\r\n    updatedUser: ProfileDataType\r\n    error?: string\r\n}\r\n\r\nexport type ProfileInitialStateType = typeof ProfileInitialState\r\n\r\nconst ProfileInitialState = {\r\n    profileData: {} as ProfileDataType,      //null as ProfileDataType | null\r\n    errorMessage: null as string | null\r\n}\r\n\r\nexport type ProfileActionsType = ReturnType<typeof setProfileDataAC>\r\n    | ReturnType<typeof setErrorProfileAC>\r\n    | ReturnType<typeof setNewNameProfileAC>\r\n    | ReturnType<typeof setNewAvatarProfileAC>\r\n\r\nexport const profileReducer = (state: ProfileInitialStateType = ProfileInitialState, action: ProfileActionsType) => {\r\n    switch (action.type) {\r\n        case PROFILE_DATA:\r\n            return {\r\n                ...state,\r\n                profileData: action.data\r\n            }\r\n        case ERROR_MESSAGE:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.error\r\n            }\r\n        case NEW_NAME_PROFILE:\r\n            return {\r\n                ...state,\r\n                profileData: {\r\n                    ...state.profileData, name: action.name\r\n                }\r\n            }\r\n        case NEW_AVATAR_PROFILE:\r\n            return {\r\n                ...state,\r\n                profileData: {\r\n                    ...state.profileData, avatar: action.avatar\r\n                }\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setProfileDataAC = (data: ProfileDataType) => ({type: PROFILE_DATA, data} as const)\r\nexport const setErrorProfileAC = (error: string) => ({type: ERROR_MESSAGE, error} as const)\r\nexport const setNewNameProfileAC = (name: string) => ({type: NEW_NAME_PROFILE, name} as const)\r\nexport const setNewAvatarProfileAC = (avatar?: any) => ({type: NEW_AVATAR_PROFILE, avatar} as const)\r\n\r\nexport const authTC = () => {\r\n    return (dispatch: Dispatch) => {\r\n        authAPI.authMe()\r\n            .then(res => {\r\n                dispatch(setAuthUserDataAC(res.data))\r\n                dispatch(setAppIsAuth(true))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setErrorProfileAC(e.response\r\n                    ? e.response.data.error\r\n                    : (e.message + ', more details in the console')\r\n                ))\r\n                dispatch(setAppIsAuth(false))\r\n            })\r\n    }\r\n}\r\n\r\nexport const changeNameProfileTC = (name: string) => {\r\n    return (dispatch: any) => {\r\n        dispatch(setAppStatus('loading'))\r\n        profileAPI.changeNameProfile(name)\r\n            .then(res => {\r\n                dispatch(setNewNameProfileAC(res.data.updatedUser.name))\r\n                // dispatch(getAuthUserData)\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setErrorProfileAC(e.response\r\n                    ? e.response.data.error\r\n                    : (e.message + ', more details in the console')\r\n                ))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setAppStatus('succeed'))\r\n                }\r\n            )\r\n    }\r\n}\r\nexport const changeAvatarProfileTC = (avatar?: string) => {\r\n    return (dispatch: Dispatch) => {\r\n        dispatch(setAppStatus('loading'))\r\n        profileAPI.changeAvatarProfile(avatar)\r\n            .then(res => {\r\n                dispatch(setNewAvatarProfileAC(res.data.updatedUser.avatar))\r\n            })\r\n            .catch((e) => {\r\n                dispatch(setErrorProfileAC(e.response\r\n                    ? e.response.data.error\r\n                    : (e.message + ', more details in the console')\r\n                ))\r\n            })\r\n            .finally(() => {\r\n                    dispatch(setAppStatus('succeed'))\r\n                }\r\n            )\r\n    }\r\n}\r\n\r\nexport default profileReducer;\r\n","import {Dispatch} from \"redux\";\r\nimport {setAppIsAuth, setAppStatus} from \"./app-reducer\";\r\nimport {setErrorProfileAC} from \"./profile-reducer\";\r\nimport {authAPI} from '../m3-dal/authAPI';\r\n\r\nconst SET_USER_DATA = 'SET_USER_DATA';\r\nconst SET_ERROR_MESSAGE = 'SET_ERROR_MESSAGE';\r\nconst LOGIN_BUTTON_DISABLE = 'LOGIN_BUTTON_DISABLE';\r\nconst LOGOUT = 'LOGOUT';\r\n\r\nexport type UserDataType = {\r\n    _id: string,\r\n    email: string,\r\n    name: string,\r\n    avatar?: string,\r\n    publicCardPacksCount: number\r\n    created: Date,\r\n    updated: Date,\r\n    isAdmin: boolean,\r\n    verified: boolean,\r\n    rememberMe: boolean\r\n    error?: string\r\n}\r\n\r\nexport type LoginInitialStateType = typeof LoginInitialState;\r\n\r\nconst LoginInitialState = {\r\n    user: null as UserDataType | null,\r\n    errorMessage: null as string | null,\r\n    loginButtonDisable: false,\r\n    logOutInfo: null as string | null\r\n};\r\n\r\nexport type LoginActionsType =\r\n    | ReturnType<typeof setAuthUserDataAC>\r\n    | ReturnType<typeof setErrorMessageAC>\r\n    | ReturnType<typeof loginButtonDisableAC>\r\n    | ReturnType<typeof logOutAC>\r\n\r\nexport const loginReducer = (state: LoginInitialStateType = LoginInitialState, action: LoginActionsType): LoginInitialStateType => {\r\n    switch (action.type) {\r\n        case SET_USER_DATA:\r\n            return {\r\n                ...state,\r\n                user: action.user,\r\n            }\r\n        case SET_ERROR_MESSAGE:\r\n            return {\r\n                ...state,\r\n                errorMessage: action.errorMessage,\r\n            }\r\n        case LOGIN_BUTTON_DISABLE:\r\n            return {\r\n                ...state,\r\n                loginButtonDisable: action.disable,\r\n            }\r\n        case LOGOUT:\r\n            return {\r\n                ...state,\r\n                logOutInfo: action.data\r\n            }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n// ACs\r\nexport const setAuthUserDataAC = (user: UserDataType | null) => ({type: SET_USER_DATA, user}) as const;\r\nexport const setErrorMessageAC = (errorMessage: string | null) => ({type: SET_ERROR_MESSAGE, errorMessage}) as const;\r\nexport const loginButtonDisableAC = (disable: boolean) => ({type: LOGIN_BUTTON_DISABLE, disable}) as const;\r\nexport const logOutAC = (data: string | null) => ({type: LOGOUT, data}) as const;\r\n\r\n// Thunks\r\nexport const getAuthUserData = (email: string, password: string, rememberMe: boolean) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    dispatch(loginButtonDisableAC(true))\r\n    authAPI.login(email, password, rememberMe)\r\n        .then(res => {\r\n            dispatch(setAuthUserDataAC(res.data))\r\n            dispatch(loginButtonDisableAC(false))\r\n            setAppIsAuth(true)\r\n        })\r\n        .catch((e) => {\r\n            dispatch(setErrorMessageAC(e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            ))\r\n            dispatch(loginButtonDisableAC(false))\r\n            setAppIsAuth(false)\r\n        }).finally(() => {\r\n        dispatch(setAppStatus('succeed'))\r\n    })\r\n}\r\nexport const logOutTC = () => (dispatch: Dispatch) => {\r\n    authAPI.logout()\r\n        .then(res => {\r\n                dispatch(logOutAC(res.data))\r\n                dispatch(setAuthUserDataAC(null))\r\n            }\r\n        )\r\n        .catch((e) => {\r\n            dispatch(setErrorProfileAC(e.response\r\n                ? e.response.data.error\r\n                : (e.message + ', more details in the console')\r\n            ))\r\n        })\r\n}\r\n\r\n\r\n\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport Login from \"./Login\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {getAuthUserData, LoginInitialStateType, setErrorMessageAC} from \"../../m2-bll/login-reducer\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\nimport {PATH} from \"../Routes\";\r\n\r\ntype LoginContainerPropsType = {}\r\n\r\nconst LoginContainer: React.FC<LoginContainerPropsType> = (props: any) => {\r\n\r\n    const isAuth = useSelector<AppRootStateType, LoginInitialStateType>(state => state.login);\r\n    const loading = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n\r\n    const dispatch = useDispatch();\r\n    const [email, setEmail] = useState<string>('panich2303@gmail.com');\r\n    const [password, setPassword] = useState<string>('12345678');\r\n    const [rememberMe, setRememberMe] = useState<boolean>(false);\r\n\r\n    useEffect(() => {\r\n        dispatch(setErrorMessageAC(''))\r\n    }, [email, password])\r\n\r\n    if (isAuth.user !== null) {\r\n        return <Redirect to={PATH.PROFILE}/>\r\n    }\r\n\r\n    const addUserData = () => {\r\n        dispatch(getAuthUserData(email, password, rememberMe))\r\n    }\r\n    const addNewEmail = (newEmail: string) => {\r\n        setEmail(newEmail)\r\n    }\r\n    const addNewPassword = (newPassword: string) => {\r\n        setPassword(newPassword)\r\n    }\r\n    // const changeRememberMe = (newValue: boolean) => {\r\n    //     setRememberMe(newValue)\r\n    // }\r\n\r\n    const onChangeEmailHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        addNewEmail(e.currentTarget.value)\r\n    }\r\n    const onChangePasswordHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        addNewPassword(e.currentTarget.value)\r\n    }\r\n    // const onChangeRememberMeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n    //     changeRememberMe(e.currentTarget.checked)\r\n    // }\r\n\r\n    return (\r\n        <Login\r\n            title=\"Log in\"\r\n            onChangeEmailHandler={onChangeEmailHandler}\r\n            onChangePasswordHandler={onChangePasswordHandler}\r\n            addUserData={addUserData}\r\n            onChangeRememberMeHandler={setRememberMe}\r\n            isAuth={isAuth}\r\n            preloader={loading}\r\n        />\r\n    )\r\n}\r\n\r\nexport default LoginContainer;\r\n\r\n","import axios from 'axios';\r\n\r\nexport interface IForgotData {\r\n    email: string\r\n    from: string\r\n    message: string\r\n}\r\n\r\nconst from = 'pvlchkhrv@gmail.com';\r\nconst message = `<div>password recover link: <a href='https://neko-back.herokuapp.com/2.0/set-new-password/$token$'>Link</a></div>`;\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n});\r\n\r\nexport const restorePasswordAPI = {\r\n    restorePassword(email: string) {\r\n        return instance.post('/auth/forgot', {email, from, message})\r\n    },\r\n    ping(){\r\n        return instance.get(`/ping/?frontTime=${Date.now()}`);\r\n    }\r\n};\r\n","import {restorePasswordAPI} from '../m3-dal/restoreAPI';\r\nimport {Dispatch} from 'redux';\r\nimport {setAppError, setAppStatus} from './app-reducer';\r\n\r\nconst SET_SUCCESS_MESSAGE = 'AUTH/SET-SUCCESS-MESSAGE';\r\nconst SET_ERROR_MESSAGE = 'AUTH/SET-ERROR-MESSAGE';\r\nconst SET_IS_REGISTERED = 'AUTH/SET-IS-REGISTERED';\r\n\r\nconst initialState = {\r\n    isRegistered: false,\r\n    successMessage: '',\r\n    errorMessage: '',\r\n}\r\n\r\nexport const restorePasswordReducer = (state: InitialStateType = initialState, action: RestoreActionsType): InitialStateType => {\r\n    switch (action.type) {\r\n        case SET_IS_REGISTERED: return {...state, isRegistered: action.isRegistered};\r\n        case SET_ERROR_MESSAGE: return {...state, errorMessage: action.errorMessage};\r\n        case SET_SUCCESS_MESSAGE: return {...state, successMessage: action.successMessage};\r\n        default: return state;\r\n    }\r\n};\r\n\r\n//ACs\r\nexport const setSuccessMessage = (successMessage: string) => ({type: SET_SUCCESS_MESSAGE, successMessage} as const);\r\nexport const setIsRegistered = (isRegistered: boolean) => ({type: SET_IS_REGISTERED, isRegistered} as const);\r\nexport const setErrorMessage = (errorMessage: string) => ({type: SET_ERROR_MESSAGE, errorMessage} as const);\r\n\r\n//Thunks\r\nexport const restorePasswordTC = (email: string) => (dispatch: Dispatch<RestoreActionsType>) => {\r\n    dispatch(setAppStatus('loading'));\r\n    restorePasswordAPI.restorePassword(email)\r\n        .then(res => {\r\n            dispatch(setIsRegistered(true));\r\n            dispatch(setSuccessMessage(res.data.info));\r\n            dispatch(setAppStatus('succeed'));\r\n        })\r\n        .catch((e) => {\r\n            // dispatch(setIsFetching(true));\r\n            dispatch(setAppStatus('failed'));\r\n            dispatch(setAppError(e.message));\r\n            // dispatch(setErrorMessage(e.response.data.error));\r\n            dispatch(setIsRegistered(false))\r\n        })\r\n}\r\nexport const pingServerTC = () => (dispatch: Dispatch<RestoreActionsType>) => {\r\n    restorePasswordAPI.ping()\r\n        .then(res => {\r\n            console.log(res.data);\r\n        })\r\n}\r\n\r\n//Types\r\ntype RestoreActionsType =\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setIsRegistered>\r\n    | ReturnType<typeof setSuccessMessage>\r\n    | ReturnType<typeof setErrorMessage>\r\n\r\nexport type InitialStateType = typeof initialState;\r\n","import React, {ChangeEvent} from 'react';\r\nimport InputText from '../common/input/InputText';\r\nimport Button from '../common/button/Button';\r\n\r\ninterface RestorePasswordFormPropsType {\r\n    onClick: () => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nexport const RestorePasswordForm: React.FC<RestorePasswordFormPropsType> = ({onClick, onChange}) => {\r\n\r\n    return (\r\n        <form onSubmit={onClick}>\r\n            <div>\r\n                <InputText type=\"text\" onChange={onChange}/>\r\n            </div>\r\n            <div>\r\n                <Button type={'submit'}>Restore</Button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {RequestStatusType} from '../../m2-bll/app-reducer';\r\nimport {RestorePasswordForm} from './RestorePasswordForm';\r\n\r\ninterface IForgotProps {\r\n    onClick: () => void\r\n    onChange: (e: ChangeEvent<HTMLInputElement>) => void\r\n    appStatus: RequestStatusType\r\n    errorMessage: string\r\n    successMessage: string\r\n}\r\n\r\nconst RestorePassword: React.FC<IForgotProps> = (\r\n    {\r\n        onClick,\r\n        onChange,\r\n        appStatus,\r\n        errorMessage,\r\n        successMessage\r\n    }\r\n) => {\r\n    console.log('render PageFrom')\r\n    return (\r\n        <div>\r\n            <h1>Restore Password Page</h1>\r\n            <div>\r\n                <RestorePasswordForm onClick={onClick}\r\n                                     onChange={onChange}\r\n                />\r\n                {appStatus === 'loading' && <div>Loading...</div>}\r\n                {appStatus === 'failed' && <div>{errorMessage}</div>}\r\n                {appStatus === 'succeed' && <div>{successMessage}</div>}\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestorePassword;\r\n\r\n\r\n","import React, {ChangeEvent, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {restorePasswordTC} from '../../m2-bll/restore-password-reducer';\r\nimport RestorePassword from './RestorePassword';\r\nimport {Redirect} from 'react-router-dom';\r\nimport {PATH} from '../Routes';\r\nimport {RequestStatusType} from '../../m2-bll/app-reducer';\r\n\r\nconst RestorePasswordContainer: React.FC = () => {\r\n    console.log('render Page')\r\n\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const isRegistered = useSelector<AppRootStateType, boolean>(state => state.restorePassword.isRegistered);\r\n    const errorMessage = useSelector<AppRootStateType, string>(state => state.restorePassword.errorMessage);\r\n    const successMessage = useSelector<AppRootStateType, string>(state => state.restorePassword.successMessage);\r\n\r\n    const [email, setEmail] = useState('');\r\n    const dispatch = useDispatch();\r\n\r\n    const onChangeHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setEmail(e.currentTarget.value);\r\n    }\r\n    const onClickHandler = () => {\r\n        dispatch(restorePasswordTC(email));\r\n        setEmail('')\r\n    }\r\n    if (isRegistered) return <Redirect to={PATH.SET_NEW_PASSWORD}/>\r\n    return (\r\n        <div>\r\n            <RestorePassword onClick={onClickHandler}\r\n                             onChange={onChangeHandler}\r\n                             appStatus={appStatus}\r\n                             errorMessage={errorMessage}\r\n                             successMessage={successMessage}\r\n\r\n            />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RestorePasswordContainer;\r\n","import React from 'react';\r\nimport RestorePasswordContainer from './RestorePasswordContainer';\r\n\r\nconst RestorePasswordPage: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <RestorePasswordContainer/>\r\n        </div>\r\n    )\r\n}\r\nexport default RestorePasswordPage;\r\n","import React, {ChangeEvent} from 'react';\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\n// import {Simulate} from \"react-dom/test-utils\";\r\n// import error = Simulate.error;\r\nimport InputText from \"../common/input/InputText\";\r\nimport Button from '../common/button/Button';\r\nimport s from './NewPassword.module.css';\r\nimport chrome from '../common/images/chrome.jpg'\r\n\r\ntype NewPasswordPropsType = {\r\n    error: string\r\n    isChecked: boolean\r\n    requestStatus: RequestStatusType\r\n    onChangeNewPassword: (e: ChangeEvent<HTMLInputElement>) => void\r\n    onSubmit: () => void\r\n    viewPassword: () => void\r\n    newPassword: string\r\n}\r\n\r\nconst NewPassword: React.FC<NewPasswordPropsType> = ({\r\n                                                         error, isChecked, requestStatus,\r\n                                                         onChangeNewPassword, onSubmit, viewPassword, newPassword\r\n                                                     }) => {\r\n\r\n    return (\r\n        <div className={s.set}>\r\n            <div className={s.card}>\r\n                {/*<img className={s.logo} src={chrome} alt=\"logo\"/>*/}\r\n\r\n                <h2 className={s.title}>Create new password</h2>\r\n\r\n                <form className={s.form}>\r\n\r\n                    <div className={s.error}>\r\n                        {error && <span>{error}</span>}\r\n                        {requestStatus === \"loading\" && <span>loading...</span>}\r\n                    </div>\r\n                    <InputText\r\n                        type={isChecked ? \"text\" : \"password\"}\r\n                        onChange={onChangeNewPassword}\r\n                        placeholder={\"Password\"}\r\n                        value={newPassword}\r\n                    />\r\n                    <span onClick={viewPassword}>View password</span>\r\n                    <div>\r\n                        <span className={s.text}> Create new password and we will send you further instructions to email</span>\r\n                    </div>\r\n\r\n                    <Button\r\n                        disabled={requestStatus === \"loading\"}\r\n                        className={s.button}\r\n                        onClick={onSubmit}>Create new password\r\n                    </Button>\r\n                </form>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NewPassword;\r\n","import axios from \"axios\";\r\n\r\nexport const inctance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const newPasswordAPI = {\r\n    newPassword(password: string, resetPassword: string) {\r\n        return inctance.post('auth/new-password', {password, resetPassword})\r\n    }\r\n}","import {Dispatch} from \"redux\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {newPasswordAPI} from \"../m3-dal/newPasswordAPI\";\r\n\r\nexport type SetPasswordActionType = ReturnType<typeof setErrorMessagedAC> | ReturnType<typeof isSuccessfulAC>\r\nexport type SetPasswordInitialStateType = typeof initialState\r\n\r\nconst initialState = {\r\n    error: '',\r\n    isSuccessful: false\r\n};\r\n\r\nexport const newPasswordReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case 'SET-ERROR-MESSAGE': {\r\n            return {\r\n                ...state,\r\n                error: action.error\r\n            };\r\n        }\r\n        case 'IS-SUCCESSFUL': {\r\n            return {\r\n                ...state,\r\n                isSuccessful: action.isSuccessful\r\n            };\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport const setErrorMessagedAC = (error: string) => ({type: 'SET-ERROR-MESSAGE', error} as const)\r\nexport const isSuccessfulAC = (isSuccessful: boolean) => ({type: 'IS-SUCCESSFUL', isSuccessful} as const)\r\n\r\nexport const setNewPasswordTC = (newPassword: string , resetPassword: string) => (dispatch: Dispatch) => {\r\n    dispatch(setAppStatus('loading'))\r\n    return newPasswordAPI.newPassword(newPassword, resetPassword)\r\n        .then(response => {\r\n            dispatch(isSuccessfulAC(true))\r\n            dispatch(setAppStatus('succeed'))\r\n        }).catch(e => {\r\n            dispatch(setErrorMessagedAC(e.response.data.error))\r\n            dispatch(setAppStatus('failed'))\r\n        })\r\n}\r\n\r\nexport default newPasswordReducer;\r\n","import NewPassword from \"./NewPassword\";\r\nimport {ChangeEvent, useState} from \"react\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\nimport {Redirect, useParams} from \"react-router-dom\";\r\nimport {setNewPasswordTC} from \"../../m2-bll/new-password-reducer\";\r\n\r\nexport const NewPasswordContainer = () => {\r\n\r\n    const [newPassword, setNewPassword] = useState(\"\")\r\n    const [isChecked, setIsChek] = useState(false)\r\n\r\n    const requestStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const error = useSelector<AppRootStateType, string>(state => state.newPassword.error)\r\n    const isSuccessful = useSelector<AppRootStateType, boolean>(state => state.newPassword.isSuccessful)\r\n\r\n    const {token} = useParams<{ token: string }>()\r\n\r\n    const dispatch = useDispatch()\r\n\r\n    const onChangeNewPassword = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewPassword(e.currentTarget.value)\r\n    }\r\n    const viewPassword = () => {\r\n        setIsChek(!isChecked)\r\n    }\r\n    const onSubmit = () => {\r\n        dispatch(setNewPasswordTC(newPassword, token))\r\n    }\r\n\r\n    if (isSuccessful) {\r\n        return <Redirect to={'PATH.LOGIN'}/>\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <NewPassword\r\n                error={error}\r\n                isChecked={isChecked}\r\n                requestStatus={requestStatus}\r\n                onChangeNewPassword={onChangeNewPassword}\r\n                onSubmit={onSubmit}\r\n                viewPassword={viewPassword}\r\n                newPassword={newPassword}\r\n            />\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport s from './Profile.module.css'\r\nimport Button from '../common/button/Button';\r\n\r\ntype ProfilePropsType = {\r\n    auth: any\r\n    editMode: any\r\n    changeAvatarHandler: any\r\n    changeNameInputFocus: any\r\n    switchEditMode: any\r\n    onChangeNewNameHandler: any\r\n    setNewName: any\r\n    logOut: any\r\n}\r\n\r\nconst Profile: React.FC<ProfilePropsType> = ({\r\n                                                 auth,\r\n                                                 editMode,\r\n                                                 changeAvatarHandler,\r\n                                                 changeNameInputFocus,\r\n                                                 switchEditMode,\r\n                                                 onChangeNewNameHandler,\r\n                                                 setNewName,\r\n                                                 logOut\r\n                                             }) => {\r\n    return (\r\n        <div className={s.main}>\r\n\r\n            avatar:<img src={auth.dataUser?.avatar}/>\r\n            <button onClick={changeAvatarHandler}>change image</button>\r\n\r\n            {editMode\r\n\r\n                ? <input autoFocus onBlur={changeNameInputFocus}\r\n                         onChange={onChangeNewNameHandler}\r\n                />\r\n\r\n                : <span onDoubleClick={switchEditMode}> name: {auth.dataUser?.name}</span>\r\n            }\r\n\r\n            <p>token:{auth.dataUser?.token}</p>\r\n            <p>email:{auth.dataUser?.email}</p>\r\n\r\n            <Button className={s.loginBtn}\r\n                         onClick={logOut}>Log out\r\n            </Button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Profile;\r\n","import React, {ChangeEvent, useEffect} from \"react\";\r\nimport Profile from \"./Profile\";\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {PATH} from \"../Routes\";\r\nimport {Redirect} from \"react-router-dom\";\r\nimport {LoginInitialStateType, logOutTC} from \"../../m2-bll/login-reducer\";\r\nimport {authTC, changeAvatarProfileTC, changeNameProfileTC} from \"../../m2-bll/profile-reducer\";\r\nimport {useState} from \"react\";\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\n\r\n\r\ntype ProfileContainerPropsType = {}\r\n\r\nexport const ProfileContainer: React.FC<ProfileContainerPropsType> = (props) => {\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    // const userData = useSelector<AppRootStateType, ProfileDataType>(state => state.profile)\r\n    const auth = useSelector<AppRootStateType, LoginInitialStateType>(state => state.login)\r\n    const loading = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status)\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [name, setName] = useState('')\r\n\r\n    useEffect(() => {\r\n        if (!auth.user?.created) {\r\n            dispatch(authTC());\r\n        }\r\n    }, [])\r\n\r\n    if (!auth.user?.created) {\r\n        return <Redirect to={PATH.LOGIN}/>\r\n    }\r\n\r\n    const changeAvatarHandler = () => {\r\n        dispatch(changeAvatarProfileTC('https://encrypted-tbn0.gstatic.com/images?q=tbn:ANd9GcQLZCQKk9AAsrHRGSrOciC3AdPFdncKU8bwYFDDJSvFrmbgIWDXgIWykL541TCARJ7sMPE&usqp=CAU')) ///Ð·Ð°Ð³ÑÑÐ·ÐºÐ° Ð°Ð²Ð°ÑÐ°ÑÐ°\r\n    }\r\n\r\n    const changeNameInputFocus = () => {\r\n        setEditMode(false)\r\n        dispatch(changeNameProfileTC(name))\r\n    }\r\n    const switchEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n\r\n    const setNewName = (newName: string) => {\r\n        setName(newName)\r\n    }\r\n    const onChangeNewNameHandler = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setNewName(e.currentTarget.value)\r\n    }\r\n\r\n    const logOut = () => {\r\n        dispatch(logOutTC())\r\n    }\r\n\r\n    return (\r\n        <Profile\r\n            auth={auth}\r\n            editMode={editMode}\r\n            changeAvatarHandler={changeAvatarHandler}\r\n            changeNameInputFocus={changeNameInputFocus}\r\n            switchEditMode={switchEditMode}\r\n            onChangeNewNameHandler={onChangeNewNameHandler}\r\n            setNewName={setNewName}\r\n            logOut={logOut}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from '@material-ui/core';\r\nimport {PackType} from '../../m2-bll/cardPacks-reducer';\r\n\r\ntype DataTablePropsType = {\r\n    packs: PackType []\r\n    deletePackHandler: (packId: string) => void\r\n    editPackHandler: (packId: string, title: string) => void\r\n    packUserId: string\r\n    userId: string\r\n}\r\n\r\nexport const DataTable: React.FC<DataTablePropsType> = ({\r\n                                                            packs,\r\n                                                            deletePackHandler,\r\n                                                            editPackHandler,\r\n                                                            packUserId,\r\n                                                            userId\r\n                                                        }) => {\r\n    return (\r\n        <div>\r\n            <TableContainer component={Paper}>\r\n                <Table className={'classes.table'} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell><b>Title</b></TableCell>\r\n                            <TableCell align=\"center\">Cards</TableCell>\r\n                            <TableCell align=\"center\">Updated</TableCell>\r\n                            <TableCell align=\"center\">Created</TableCell>\r\n                            <TableCell align=\"center\">Actions</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {packs.map((pack) => (\r\n                            <TableRow key={pack._id}>\r\n                                <TableCell component=\"th\" scope=\"row\">\r\n                                    {pack.name}\r\n                                </TableCell>\r\n                                <TableCell align=\"center\">{pack.cardsCount}</TableCell>\r\n                                <TableCell align=\"center\">{pack.updated}</TableCell>\r\n                                <TableCell align=\"center\">{pack.created}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    {\r\n                                        userId === pack.user_id\r\n                                            ? <div>\r\n                                                <Button onClick={() => deletePackHandler(pack._id)}>Delete</Button>\r\n                                                <Button\r\n                                                    onClick={() => editPackHandler(pack._id, 'PAVEL PACK edited')}>Edit</Button>\r\n                                                <Button onClick={() => {\r\n                                                }}>Learn</Button>\r\n                                            </div>\r\n\r\n                                            : <Button onClick={() => {\r\n                                            }}>Learn</Button>\r\n                                    }\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n        </div>\r\n    )\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Slider} from '@material-ui/core';\r\nimport s from './DoubleSlider.module.css'\r\n\r\nexport const DoubleSlider = () => {\r\n    function valuetext(value: number) {\r\n        return `${value}Â°C`;\r\n    }\r\n\r\n    // const classes = useStyles();\r\n    const [value, setValue] = useState<number[]>([20, 37]);\r\n\r\n    const handleChange = (event: any, newValue: number | number[]) => {\r\n        setValue(newValue as number[]);\r\n    };\r\n\r\n    return (\r\n        <div className={s.slider}>\r\n            <Slider\r\n                value={value}\r\n                onChange={handleChange}\r\n                // min={}\r\n                // max={}\r\n                valueLabelDisplay=\"auto\"\r\n                aria-labelledby=\"range-slider\"\r\n                getAriaValueText={valuetext}\r\n            />\r\n        </div>\r\n    );\r\n}\r\n","import React, {useState} from 'react';\r\nimport {Pagination} from '@material-ui/lab';\r\n\r\ntype PaginationPropsType = {\r\n    pages: number\r\n    page: number\r\n    pageCount: number\r\n    onChangePage: (e: React.ChangeEvent<unknown>, page: number) => void\r\n    onChangeItemsQuantity: (e: React.ChangeEventHandler<HTMLInputElement>, pageCount: number) => void\r\n}\r\n\r\nexport const PaginationBar: React.FC<PaginationPropsType> = ({\r\n                                                                 page,\r\n                                                                 pages,\r\n                                                                 pageCount,\r\n                                                                 onChangePage,\r\n                                                                 onChangeItemsQuantity\r\n                                                             }) => {\r\n    return (\r\n        <>\r\n            <Pagination count={pages}\r\n                        page={page}\r\n                        onChange={onChangePage}/>\r\n        </>\r\n    )\r\n}\r\n","import React, {ChangeEvent} from 'react';\r\nimport {Button, ButtonGroup, Container, Grid, TextField,} from '@material-ui/core';\r\nimport s from './CardPackagePage.module.css'\r\nimport {DataTable} from './DataTable';\r\nimport {DoubleSlider} from './DoubleSlider';\r\nimport {PaginationBar} from './PaginationBar';\r\nimport {PackType} from '../../m2-bll/cardPacks-reducer';\r\n\r\ntype CardPacksPropsType = {\r\n    getAllPacksHandler: () => void\r\n    getUserPackHandler: () => void\r\n    createPackHandler: (title: string) => void\r\n    deletePackHandler: (packId: string) => void\r\n    editPackHandler: (packId: string, title: string) => void\r\n    onChangePage: (e: React.ChangeEvent<unknown>, page: number) => void\r\n    onChangeItemsQuantity: (e: React.ChangeEventHandler<HTMLInputElement>, pageCount: number) => void\r\n    packs: PackType[]\r\n    packUserId: string\r\n    userId: string\r\n    isMine: boolean\r\n    pages: number\r\n    page: number\r\n    pageCount: number\r\n}\r\n\r\n\r\nexport const CardPacks: React.FC<CardPacksPropsType> = ({\r\n                                                            getAllPacksHandler,\r\n                                                            getUserPackHandler,\r\n                                                            createPackHandler,\r\n                                                            deletePackHandler,\r\n                                                            editPackHandler,\r\n                                                            onChangePage,\r\n                                                            onChangeItemsQuantity,\r\n                                                            packs,\r\n                                                            packUserId,\r\n                                                            userId,\r\n                                                            isMine,\r\n                                                            pages,\r\n                                                            page,\r\n                                                            pageCount\r\n                                                        }) => {\r\n\r\n    return (\r\n        <>\r\n            <Container fixed className={s.container}>\r\n                <Grid container>\r\n                    <Grid item xs={3} className={s.settings}>\r\n                        <div>\r\n                            <h5>Show Card Packs</h5>\r\n                            {\r\n                                isMine\r\n                                    ? <Button\r\n                                        color=\"secondary\"\r\n                                        variant='contained'\r\n                                        onClick={getAllPacksHandler}\r\n                                    >Show All Packs</Button>\r\n                                    : <Button color=\"primary\"\r\n                                              variant='contained'\r\n                                              onClick={getUserPackHandler}\r\n                                    >Show My Packs</Button>\r\n                            }\r\n                        </div>\r\n                        <div>\r\n                            <h5>Number Of Cards</h5>\r\n                            <DoubleSlider/>\r\n                        </div>\r\n                    </Grid>\r\n                    <Grid item xs={9} className={s.packList}>\r\n                        <h3>Packs List</h3>\r\n                        <div>\r\n                            <TextField id=\"standard-search\" label=\"Search\" type=\"search\" variant={'outlined'}\r\n                                       size={'small'}/>\r\n                            <Button variant={'contained'}\r\n                                    color={'secondary'}\r\n                                    size={'large'}\r\n                                    onClick={() => createPackHandler('PAVEL PACK')}\r\n                            >Add New Pack</Button>\r\n                        </div>\r\n                        <DataTable packs={packs}\r\n                                   deletePackHandler={deletePackHandler}\r\n                                   editPackHandler={editPackHandler}\r\n                                   packUserId={packUserId}\r\n                                   userId={userId}\r\n                        />\r\n                        <PaginationBar pages={pages}\r\n                                       page={page}\r\n                                       pageCount={pageCount}\r\n                                       onChangePage={onChangePage}\r\n                                       onChangeItemsQuantity={onChangeItemsQuantity}\r\n                        />\r\n                    </Grid>\r\n                </Grid>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\n\r\n","import axios from 'axios';\r\nimport {PackType} from '../m2-bll/cardPacks-reducer';\r\n\r\n\r\nexport type GetPacksDataType = {\r\n    cardPacks: PackType[];\r\n    cardPacksTotalCount: number\r\n    error: string;\r\n}\r\nexport type PacksPostDataType = {\r\n    cardPacks: {\r\n        name: string\r\n        path?: string\r\n        grade?: number\r\n        shots?: number\r\n        rating?: number\r\n        deckCover?: string\r\n        private?: false\r\n        type?: string\r\n    }\r\n};\r\n\r\nexport type PacksParamsType = {\r\n    packName?: 'PAVEL PACK'\r\n    min?: number\r\n    max?: number\r\n    page?: number\r\n    pageCount?: number\r\n    user_id?: string\r\n    sortPacks?: string\r\n}\r\n\r\nconst instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0',\r\n    withCredentials: true\r\n});\r\n\r\nexport const packsAPI = {\r\n    getPacks(params: PacksParamsType) {\r\n        return instance.get<GetPacksDataType>\r\n        (`/cards/pack`, {params: {...params}})\r\n            .then(res => res.data);\r\n    },\r\n    addPack(title: string) {\r\n        return instance.post('/cards/pack', {cardsPack: {name: title}})\r\n            .then(res => res.data);\r\n    },\r\n    deletePack(id: string) {\r\n        return instance.delete(`/cards/pack?id=${id}`)\r\n            .then(res => res.data);\r\n    },\r\n    async updatePack(id: string, title: string) {\r\n        return await instance.put('/cards/pack', {cardsPack: {_id: id, name: title}});\r\n    }\r\n};\r\n\r\n","import {Dispatch} from 'redux';\r\nimport {setAppError, setAppStatus} from './app-reducer';\r\nimport {packsAPI, PacksParamsType} from '../m3-dal/cardsPackAPI';\r\nimport {ThunkAction} from 'redux-thunk';\r\nimport {AppRootStateType} from './store';\r\n\r\nconst SET_PACKS = 'PACKS/SET-PACKS';\r\nconst SET_USER_ID = 'PACKS/SET-USER-ID';\r\nconst SET_PAGE = 'PACKS/SET-PAGE';\r\nconst SET_PAGE_COUNT = 'PACKS/SET-PAGE-COUNT';\r\nconst SET_PACKS_TOTAL_COUNT = 'PACKS/SET-PACKS-TOTAL-COUNT';\r\n\r\n\r\nexport const PacksInitState: PacksStateType = {\r\n    packsData: {\r\n        cardPacks: [],\r\n        cardPacksTotalCount: 0,\r\n        maxCardsCount: 0,\r\n        minCardsCount: 0,\r\n        page: 1,\r\n        pageCount: 5\r\n    },\r\n    packUser_id: '',\r\n};\r\n\r\nexport const packsReducer = (state: PacksStateType = PacksInitState, action: ActionsType): PacksStateType => {\r\n    switch (action.type) {\r\n        case SET_PACKS:\r\n            return {\r\n                ...state, packsData: {\r\n                    ...state.packsData,\r\n                    cardPacks: action.cardPacks,\r\n                }\r\n            };\r\n        case SET_USER_ID:\r\n            return {\r\n                ...state,\r\n                packUser_id: action.userId\r\n            };\r\n        case SET_PAGE:{\r\n            return { ...state, packsData: {...state.packsData, page: action.page} };\r\n        }\r\n\r\n        case SET_PAGE_COUNT:\r\n            return { ...state, packsData: {...state.packsData, page: action.pageCount} }\r\n        case SET_PACKS_TOTAL_COUNT:\r\n            return { ...state, packsData: {...state.packsData, cardPacksTotalCount: action.totalCount} }\r\n        // case SET_MIN_MAX:\r\n        //     return { ...state, packsData: {...state.packsData, minCardsCount: action.totalCount} }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\n//ACs\r\nexport const setPacks = (cardPacks: PackType []) => ({type: SET_PACKS, cardPacks} as const);\r\nexport const setUserId = (userId: string) => ({type: SET_USER_ID, userId} as const);\r\nexport const setPage = (page: number) => ({type: SET_PAGE, page} as const);\r\nexport const setPageCount = (pageCount: number) => ({type: SET_PAGE_COUNT, pageCount} as const);\r\nexport const setPacksTotalCount = (totalCount: number) => ({type: SET_PACKS_TOTAL_COUNT, totalCount} as const);\r\n\r\n//Thunks\r\nexport const getPacks = () => async (dispatch: Dispatch<ActionsType>, getState: () => AppRootStateType) => {\r\n    dispatch(setAppStatus('loading'));\r\n    const packUser_id = getState().packs.packUser_id;\r\n    const {page, pageCount, minCardsCount, maxCardsCount} = getState().packs.packsData\r\n    try {\r\n        const response = await packsAPI.getPacks({user_id: packUser_id, pageCount, page, min: minCardsCount, max: maxCardsCount});\r\n        dispatch(setPacks(response.cardPacks));\r\n        dispatch(setPacksTotalCount(response.cardPacksTotalCount));\r\n        dispatch(setAppStatus('succeed'));\r\n        console.log(response);\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n};\r\n\r\nexport const createPack = (title: string) => async (getState: () => AppRootStateType, dispatch: Dispatch<any>) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        const response = await packsAPI.addPack(title);\r\n        dispatch(getPacks());\r\n        dispatch(setAppStatus('succeed'));\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n};\r\n\r\nexport const deletePackOnServer = (id: string): ThunkAction<void, AppRootStateType, unknown, any> => (dispatch) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        const response = packsAPI.deletePack(id);\r\n        dispatch(getPacks());\r\n        dispatch(setAppStatus('succeed'));\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n}\r\n\r\nexport const updatePackTitleOnServer = (id: string, title: string) => (dispatch: Dispatch<any>) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        const response = packsAPI.updatePack(id, title);\r\n        dispatch(getPacks());\r\n        dispatch(setAppStatus('succeed'));\r\n        console.log(response);\r\n    } catch (e) {\r\n        dispatch(setAppError(e.message));\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n}\r\n\r\n//Types\r\ntype ActionsType =\r\n    | ReturnType<typeof setAppError>\r\n    | ReturnType<typeof setAppStatus>\r\n    | ReturnType<typeof setPacks>\r\n    | ReturnType<typeof setUserId>\r\n    | ReturnType<typeof setPage>\r\n    | ReturnType<typeof setPageCount>\r\n    | ReturnType<typeof setPacksTotalCount>\r\n\r\nexport type PackType = {\r\n    _id: string\r\n    user_id: string\r\n    name: string\r\n    path: string // Ð¿Ð°Ð¿ÐºÐ°\t,\r\n    cardsCount: number\r\n    grade: number // ÑÑÐµÐ´Ð½ÑÑ Ð¾ÑÐµÐ½ÐºÐ° ÐºÐ°ÑÑÐ¾ÑÐµÐº\r\n    shots: number // ÐºÐ¾Ð»Ð¸ÑÐµÑÑÐ²Ð¾ Ð¿Ð¾Ð¿ÑÑÐ¾Ðº\t\t\tÐ¿ÑÐ¸Ð²Ð°ÑÐ½ÑÐµ ÐºÐ¾Ð»Ð¾Ð´Ñ Ð±ÑÐ´ÑÑ\r\n    rating: number // Ð»Ð°Ð¹ÐºÐ¸\tÑÐ¾Ð»ÑÐºÐ¾ ÐµÑÐ»Ð¸ ÑÐºÐ°Ð·Ð°ÑÑ ÑÐ²Ð¾Ð¹\r\n    type: string\r\n    created: string\r\n    updated: string\r\n    __v: number\r\n};\r\nexport type PacksStateType = {\r\n    packsData: {\r\n        cardPacks: PackType [],\r\n        cardPacksTotalCount: number,\r\n        maxCardsCount: number,\r\n        minCardsCount: number,\r\n        page: number,\r\n        pageCount: number\r\n    },\r\n    packUser_id: string,\r\n}\r\n","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from 'react-redux';\r\nimport {AppRootStateType} from '../../m2-bll/store';\r\nimport {CardPacks} from './CardPacks';\r\nimport {\r\n    createPack,\r\n    deletePackOnServer,\r\n    getPacks,\r\n    PackType, setPage,\r\n    setUserId,\r\n    updatePackTitleOnServer\r\n} from '../../m2-bll/cardPacks-reducer';\r\n\r\nexport const CardPacksContainer: React.FC = () => {\r\n    const packs = useSelector<AppRootStateType, PackType[]>(state => state.packs.packsData.cardPacks);\r\n    const {\r\n        cardPacksTotalCount,\r\n        maxCardsCount,\r\n        minCardsCount,\r\n        page,\r\n        pageCount\r\n    } = useSelector<AppRootStateType, any>(state => state.packs.packsData);\r\n    const packUserId = useSelector<AppRootStateType, string>(state => state.packs.packUser_id);\r\n    const user = useSelector<AppRootStateType, any>(state => state.login.user);\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.app.isAuth);\r\n    const [isMine, setIsMine] = useState(!!packUserId);\r\n    // const {params} = useParams();\r\n    const pages = Math.ceil(cardPacksTotalCount / pageCount);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(getPacks());\r\n    }, [dispatch]);\r\n\r\n    const getAllPacksHandler = () => {\r\n        dispatch(setUserId(''));\r\n        dispatch(getPacks());\r\n        setIsMine(false);\r\n        setPage(1);\r\n    }\r\n    const getUserPackHandler = () => {\r\n        dispatch(setUserId(user._id));\r\n        dispatch(getPacks());\r\n        setIsMine(true);\r\n        setPage(1);\r\n    }\r\n    const createPackHandler = (title: string) => {\r\n        dispatch(createPack(title));\r\n    }\r\n    const deletePackHandler = (packId: string) => {\r\n        dispatch(deletePackOnServer(packId));\r\n    }\r\n    const editPackHandler = (packId: string, title: string) => {\r\n        dispatch(updatePackTitleOnServer(packId, title))\r\n    }\r\n    const onChangePageHandler = (e: React.ChangeEvent<unknown>, value: number) => {\r\n        dispatch(setPage(value));\r\n        dispatch(getPacks());\r\n    }\r\n    const onChangePageCountHandler = (e: React.ChangeEventHandler<HTMLInputElement>, pageCount: number) => {\r\n        dispatch(getPacks());\r\n    }\r\n\r\n    const onSearch = (e: ChangeEvent<HTMLInputElement>) => {\r\n\r\n    }\r\n\r\n    const onChangeSliderHandler = (e: any, newValue: number | number[]) => {\r\n\r\n    }\r\n\r\n    // if (!isAuth) {\r\n    //     return <Redirect to={'/login'}/>\r\n    // }\r\n    return (\r\n        <CardPacks getAllPacksHandler={getAllPacksHandler}\r\n                   getUserPackHandler={getUserPackHandler}\r\n                   createPackHandler={createPackHandler}\r\n                   deletePackHandler={deletePackHandler}\r\n                   editPackHandler={editPackHandler}\r\n                   onChangePage={onChangePageHandler}\r\n                   onChangeItemsQuantity={onChangePageCountHandler}\r\n                   packs={packs}\r\n                   packUserId={packUserId}\r\n                   isMine={isMine}\r\n                   userId={user._id}\r\n                   pages={pages}\r\n                   pageCount={pageCount}\r\n                   page={page}\r\n        />\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {CardPacksContainer} from './CardPacksContainer';\r\n\r\nexport const CardPacksPage = () => {\r\n    return (\r\n        <CardPacksContainer/>\r\n    )\r\n}\r\n\r\n","import axios, {AxiosResponse} from \"axios\";\r\n\r\nexport const instance = axios.create({\r\n    baseURL: 'https://neko-back.herokuapp.com/2.0/',\r\n    withCredentials: true\r\n})\r\n\r\nexport const cardsAPI = {\r\n    authMe() {\r\n        return instance.post('/auth/me', {});\r\n    },\r\n    getCards(cardQuestion: string, packId: string, sortCards: string, page: number, pageCount: number) {\r\n        return instance.get(`cards/card?cardQuestion=${cardQuestion}&cardsPack_id=${packId}&sortCards=${sortCards}&page=${page}&pageCount=${pageCount}`)\r\n    },\r\n\r\n    deleteCard(cardId: string) {\r\n        return instance.delete(`cards/card?id=${cardId}`,)\r\n    },\r\n    createCard(packId:string) {\r\n        return instance.post(`cards/card`, {card: {cardsPack_id: packId}})\r\n    },\r\n    updateCard(cardId: string) {\r\n        return instance.put(`cards/card`, {card: {_id: cardId}})\r\n    }\r\n}\r\n","import {cardsAPI} from \"../m3-dal/cardsAPI\";\r\nimport {setAppStatus} from \"./app-reducer\";\r\nimport {Dispatch} from \"redux\";\r\nimport {AppRootStateType} from \"./store\";\r\n\r\nconst SET_CARDS = \"CARDS/SET_DATA\"\r\nconst SET_QUESTION = \"CARDS/SET_QUESTION\"\r\nconst SET_PAGE_COUNT = \"CARDS/SET_PAGE_COUNT\"\r\nconst SET_SORT_TYPE = \"CARDS/SET_SORT_TYPE\"\r\nconst SET_NUMBER_PAGE = \"CARDS/SET_NUMBER_PAGE\"\r\nexport type CardsResponseType = {\r\n    cards: Array<CardType>\r\n    cardsTotalCount: number\r\n    maxGrade: number\r\n    minGrade: number\r\n    page: number\r\n    pageCount: number\r\n    packUserId: string\r\n}\r\nexport type CardType = {\r\n    answer: string,\r\n    question: string,\r\n    cardsPack_id: string,\r\n    grade: number,\r\n    rating: number,\r\n    shots: number,\r\n    type: string,\r\n    user_id: string,\r\n    created: string,\r\n    updated: string,\r\n    __v: number,\r\n    _id: string\r\n}\r\nexport type CardsStateType = {\r\n    cardsData: {\r\n        cards: Array<CardType>,\r\n        cardsTotalCount: number,\r\n        maxGrade: number,\r\n        minGrade: number,\r\n        page: number,\r\n        pageCount: number,\r\n        packUserId: string\r\n    }\r\n    searchValue: string,\r\n    sort: string\r\n}\r\nconst initialState = {\r\n    cardsData: {\r\n        cards: [\r\n            {\r\n                answer: \"no answer\",\r\n                question: \"no question\",\r\n                cardsPack_id: \"\",\r\n                grade: 5,\r\n                rating: 0,\r\n                shots: 1,\r\n                type: \"card\",\r\n                user_id: \"\",\r\n                created: \"\",\r\n                updated: \"\",\r\n                __v: 0,\r\n                _id: \"\"\r\n            }\r\n        ],\r\n        cardsTotalCount: 10,\r\n        maxGrade: 5.2,\r\n        minGrade: 2,\r\n        page: 1,\r\n        pageCount: 5,\r\n        packUserId: \"\"\r\n    },\r\n    searchValue: \"\",\r\n    sort: \"\"\r\n};\r\nexport const cardsReducer = (state: CardsStateType = initialState, action: ActionsType): CardsStateType => {\r\n    switch (action.type) {\r\n        case SET_CARDS:\r\n            return {\r\n                ...state,cardsData :action.data\r\n            };\r\n        case SET_PAGE_COUNT:\r\n            return {...state, cardsData: {...state.cardsData, pageCount: action.pageCount}};\r\n        case SET_QUESTION:\r\n            return {\r\n                ...state, searchValue: action.question\r\n            };\r\n        case SET_SORT_TYPE:\r\n            return {\r\n                ...state, sort: action.sortType\r\n            };\r\n        case SET_NUMBER_PAGE:\r\n            return {\r\n                ...state, cardsData: {\r\n                    ...state.cardsData, page: action.page\r\n                }\r\n            };\r\n        default:\r\n            return state;\r\n    }\r\n};\r\nexport type AuthInitialStateType = typeof initialState;\r\n\r\nexport const setIsCards = (data:CardsResponseType) => ({type: \"CARDS/SET_DATA\", data: data} as const)\r\nexport type setIsCardsACType = ReturnType<typeof setIsCards>\r\n\r\nexport const setPageCount = (pageCount: number) => ({type: \"CARDS/SET_PAGE_COUNT\", pageCount} as const)\r\nexport type setPageCountACType = ReturnType<typeof setPageCount>\r\n\r\nexport const setQuestion = (question: string) => ({type: \"CARDS/SET_QUESTION\", question} as const)\r\nexport type setQuestionACType = ReturnType<typeof setQuestion>\r\n\r\nexport const setSortType = (sortType: string) => ({type: \"CARDS/SET_SORT_TYPE\", sortType} as const)\r\nexport type setSortACType = ReturnType<typeof setSortType>\r\nexport const setNumberPage = (page: number) => ({type: \"CARDS/SET_NUMBER_PAGE\", page} as const)\r\nexport type setNumberPageACType = ReturnType<typeof setNumberPage>\r\n\r\ntype ActionsType = setIsCardsACType | setPageCountACType | setQuestionACType | setSortACType | setNumberPageACType;\r\n\r\nexport const aboutMeThunk = () => async (dispatch: any) => {\r\n    await cardsAPI.authMe();\r\n}\r\n\r\nexport const getCardsThunk = (packId: string) => async (dispatch: Dispatch, getState: () => AppRootStateType) => {\r\n    const {page, pageCount} = getState().cards.cardsData\r\n    const {searchValue, sort} = getState().cards\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        let response = await cardsAPI.getCards(searchValue, packId, sort, page, pageCount);\r\n        dispatch(setIsCards(response.data))\r\n        dispatch(setAppStatus('succeed'));\r\n        console.log(response.data)\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch(setAppStatus('failed'));\r\n    }\r\n}\r\n\r\nexport const deleteCardThunk = (cardId: string, packId: string) => async (dispatch: any) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        let response = await cardsAPI.deleteCard(cardId);\r\n        dispatch(setAppStatus('succeed'));\r\n        dispatch(getCardsThunk(packId))\r\n        console.log(response.data)\r\n    } catch (error) {\r\n        dispatch(setAppStatus('failed'));\r\n        console.log(error)\r\n    }\r\n}\r\n\r\nexport const createCardThunk = (packId: string) => async (dispatch: any) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        let response = await cardsAPI.createCard(packId);\r\n        dispatch(getCardsThunk(packId))\r\n        dispatch(setAppStatus('succeed'));\r\n        console.log(response.data)\r\n    } catch (error) {\r\n        console.log(error)\r\n        dispatch(setAppStatus('failed'));\r\n        // dispatch(setIsErrorMessage(error.response.data.error))\r\n    }\r\n}\r\n\r\nexport const updateCardThunk = (cardId: string, packId: string) => async (dispatch: any) => {\r\n    dispatch(setAppStatus('loading'));\r\n    try {\r\n        let response = await cardsAPI.updateCard(cardId);\r\n        dispatch(getCardsThunk(packId))\r\n        dispatch(setAppStatus('succeed'));\r\n        console.log(response.data)\r\n    } catch (error) {\r\n        dispatch(setAppStatus('failed'));\r\n        console.log(error)\r\n        // dispatch(setIsErrorMessage(error.response.data.error))\r\n    }\r\n}\r\n\r\nexport default cardsReducer\r\n\r\n","import React from 'react';\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowUpwardIcon from \"@material-ui/icons/ArrowUpward\";\r\nimport ArrowDownwardIcon from \"@material-ui/icons/ArrowDownward\";\r\n\r\ninterface PaginatorProps {\r\n    sortUpClick: () => void\r\n    sortDownClick: () => void\r\n}\r\n\r\nconst SortButtons = ({\r\n                         sortUpClick,\r\n                         sortDownClick\r\n                     }: PaginatorProps) => {\r\n    return <>\r\n        <IconButton onClick={sortDownClick} size=\"small\">\r\n            <ArrowUpwardIcon fontSize=\"inherit\"/>\r\n        </IconButton>\r\n        <IconButton onClick={sortUpClick} size=\"small\">\r\n            <ArrowDownwardIcon fontSize=\"inherit\"/>\r\n        </IconButton>\r\n    </>\r\n}\r\n\r\nexport default SortButtons;","import React from 'react';\r\nimport {Button, Paper, Table, TableBody, TableCell, TableContainer, TableHead, TableRow} from '@material-ui/core';\r\nimport {Pagination} from '@material-ui/lab';\r\nimport s from './CardsPage.module.css'\r\nimport {AuthInitialStateType} from \"../../m2-bll/cards-reducer\";\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport ArrowDownwardIcon from '@material-ui/icons/ArrowDownward';\r\nimport ArrowUpwardIcon from '@material-ui/icons/ArrowUpward';\r\nimport SortButtons from \"./SortButtons\";\r\n\r\ninterface TableProps {\r\n    disable: boolean\r\n    cardsObj: AuthInitialStateType\r\n    appStatus: RequestStatusType\r\n    onDeleteClickHandler: (cardPackId: string) => void\r\n    onUpdateClickHandler: (id: string) => void\r\n    sortUpClick: () => void\r\n    sortDownClick: () => void\r\n}\r\n\r\nexport const TableData = (\r\n    {\r\n        disable,\r\n        onDeleteClickHandler,\r\n        onUpdateClickHandler,\r\n        appStatus,\r\n        cardsObj,\r\n        sortDownClick,\r\n        sortUpClick\r\n    }: TableProps) => {\r\n\r\n    return (\r\n        <div>\r\n            {appStatus === 'loading' && <div>Loading...</div>}\r\n            {appStatus === 'failed' && <div>{appStatus}</div>}\r\n            {appStatus === 'succeed' && <div></div>}\r\n            <TableContainer component={Paper}>\r\n                <Table className={s.table} aria-label=\"simple table\">\r\n                    <TableHead>\r\n                        <TableRow>\r\n                            <TableCell>Question</TableCell>\r\n                            <TableCell align=\"center\">Answer</TableCell>\r\n                            <TableCell align=\"center\">Grade</TableCell>\r\n                            <TableCell align=\"center\">Updated\r\n                                <SortButtons sortUpClick={sortUpClick} sortDownClick={sortDownClick}/>\r\n                            </TableCell>\r\n                            <TableCell align=\"center\">Rating</TableCell>\r\n                            <TableCell align=\"center\">Action</TableCell>\r\n                        </TableRow>\r\n                    </TableHead>\r\n                    <TableBody>\r\n                        {cardsObj.cardsData.cards.map((card) => (\r\n                            <TableRow key={card._id}>\r\n                                <TableCell component=\"th\">{card.question}</TableCell>\r\n                                <TableCell align=\"center\">{card.answer}</TableCell>\r\n                                <TableCell align=\"center\">{card.grade}</TableCell>\r\n                                <TableCell align=\"center\">{card.updated}</TableCell>\r\n                                <TableCell align=\"center\">{card.rating}</TableCell>\r\n                                <TableCell align=\"center\">\r\n                                    <Button disabled={disable} variant={'contained'} color={'primary'}\r\n                                            size={'medium'}\r\n                                            onClick={() => onUpdateClickHandler(card._id)}>EDIT</Button>\r\n                                    <Button disabled={disable} variant={'contained'} color={'secondary'}\r\n                                            size={'medium'}\r\n                                            onClick={() => {\r\n                                                onDeleteClickHandler(card._id)\r\n                                            }}>DELETE</Button>\r\n                                </TableCell>\r\n                            </TableRow>\r\n                        ))}\r\n                    </TableBody>\r\n                </Table>\r\n            </TableContainer>\r\n\r\n        </div>\r\n    );\r\n}\r\n\r\n\r\n\r\n","import React from 'react';\r\nimport TablePagination from '@material-ui/core/TablePagination';\r\n\r\ninterface PaginatorProps {\r\n    cardsTotalCount: number\r\n    pageCount: number\r\n    page: number\r\n    handleChangePage: (event: unknown, newPage: number) => void\r\n    handleChangeRowsPerPage: (event: React.ChangeEvent<HTMLInputElement>) => void\r\n}\r\n\r\nconst Paginator = ({\r\n                       cardsTotalCount,\r\n                       pageCount,\r\n                       page,\r\n                       handleChangePage,\r\n                       handleChangeRowsPerPage\r\n\r\n                   }:PaginatorProps) => {\r\n    return <>\r\n        <TablePagination\r\n            rowsPerPageOptions={[5, 10, 15]}\r\n            component=\"div\"\r\n            count={cardsTotalCount}\r\n            rowsPerPage={pageCount}\r\n            page={page - 1}\r\n            onChangePage={handleChangePage}\r\n            onChangeRowsPerPage={handleChangeRowsPerPage}\r\n        />\r\n    </>\r\n}\r\n\r\nexport default Paginator;","import React, {ChangeEvent, useEffect, useState} from 'react';\r\nimport {useDispatch, useSelector} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../m2-bll/store\";\r\nimport {Button, Container, TextField,} from '@material-ui/core'\r\nimport s from './CardsPage.module.css'\r\nimport {\r\n    aboutMeThunk,\r\n    CardsStateType,\r\n    createCardThunk,\r\n    deleteCardThunk,\r\n    getCardsThunk,\r\n    setNumberPage,\r\n    setPageCount,\r\n    setQuestion,\r\n    setSortType,\r\n    updateCardThunk\r\n} from \"../../m2-bll/cards-reducer\";\r\nimport {TableData} from './Table';\r\nimport {RequestStatusType} from \"../../m2-bll/app-reducer\";\r\nimport {Redirect, useParams} from 'react-router-dom';\r\nimport Paginator from \"./Paginator\";\r\n\r\nconst CardsPageContainer = () => {\r\n    console.log(\"CardsPageContainer\")\r\n    const searchValue = useSelector<AppRootStateType, string>(state => state.cards.searchValue);\r\n    const [value, setValue] = useState(searchValue)\r\n    const dispatch = useDispatch()\r\n    const {cardPackID} = useParams<{ cardPackID: string }>();\r\n    const page = useSelector<AppRootStateType, number>(state => state.cards.cardsData.page);\r\n    const pageCount = useSelector<AppRootStateType, number>(state => state.cards.cardsData.pageCount);\r\n    const cardsTotalCount = useSelector<AppRootStateType, number>(state => state.cards.cardsData.cardsTotalCount);\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.app.isAuth);\r\n    const appStatus = useSelector<AppRootStateType, RequestStatusType>(state => state.app.status);\r\n    const cardsObj = useSelector<AppRootStateType, CardsStateType>(state => state.cards);\r\n    const user = useSelector<AppRootStateType, any>(state => state.login.user);\r\n    const userId = useSelector<AppRootStateType, string>(state => state.cards.cardsData.packUserId);\r\n\r\n    const onDeleteClickHandler = (id: string) => {\r\n        dispatch(deleteCardThunk(id, cardPackID));\r\n    };\r\n    const onCreateClickHandler = () => {\r\n        dispatch(createCardThunk(cardPackID));\r\n    };\r\n    const onUpdateClickHandler = (id: string) => {\r\n        dispatch(updateCardThunk(id, cardPackID));\r\n    };\r\n    const searchClick = () => {\r\n        dispatch(setQuestion(value))\r\n        dispatch(getCardsThunk(cardPackID))\r\n    }\r\n    const onChangeInput = (e: ChangeEvent<HTMLInputElement>) => {\r\n        setValue(e.currentTarget.value)\r\n    }\r\n    const sortUpClick = () => {\r\n        dispatch(setSortType(\"0updated\"))\r\n        dispatch(getCardsThunk(cardPackID))\r\n    }\r\n    const sortDownClick = () => {\r\n        dispatch(setSortType(\"1updated\"))\r\n        dispatch(getCardsThunk(cardPackID))\r\n    }\r\n    const handleChangePage = (event: unknown, newPage: number) => {\r\n        dispatch(setNumberPage(newPage + 1))\r\n        dispatch(getCardsThunk(cardPackID))// newPage + 1, pageCount\r\n    };\r\n    const handleChangeRowsPerPage = (event: React.ChangeEvent<HTMLInputElement>) => {\r\n        dispatch(setPageCount(+event.target.value))\r\n        dispatch(getCardsThunk(cardPackID));//, page, +event.target.value\r\n    };\r\n    useEffect(() => {\r\n        if (!isAuth) {\r\n            dispatch(aboutMeThunk())\r\n        }\r\n        dispatch(getCardsThunk(cardPackID))\r\n    }, [isAuth, dispatch])\r\n    let disable = (user._id === userId) ? false : true\r\n\r\n    return (\r\n        <div className={s.main}>\r\n            <Container maxWidth=\"lg\" className={s.container}>\r\n                <h3>Cards List</h3>\r\n                <div className={s.search}>\r\n                    <div>\r\n                        <TextField value={value} onChange={onChangeInput} label=\"Search by question\" type=\"search\"\r\n                                   variant={'outlined'}\r\n                                   size={'small'}/>\r\n                    </div>\r\n                    <div className={s.button}>\r\n                        <Button onClick={searchClick} variant={'contained'} color={'primary'}\r\n                                size={'medium'}>Search</Button>\r\n                    </div>\r\n                </div>\r\n                <div className={s.addButton}>\r\n                    <Button\r\n                        onClick={onCreateClickHandler} variant={'contained'} color={'primary'} size={'medium'}\r\n                        disabled={disable}\r\n                    >Add New Card</Button>\r\n                </div>\r\n                <TableData\r\n                    disable={disable}\r\n                    onDeleteClickHandler={onDeleteClickHandler}\r\n                    onUpdateClickHandler={onUpdateClickHandler}\r\n                    cardsObj={cardsObj}\r\n                    appStatus={appStatus}\r\n                    sortDownClick={sortDownClick}\r\n                    sortUpClick={sortUpClick}/>\r\n\r\n                <Paginator cardsTotalCount={cardsTotalCount} page={page} pageCount={pageCount}\r\n                           handleChangePage={handleChangePage} handleChangeRowsPerPage={handleChangeRowsPerPage}/>\r\n            </Container>\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardsPageContainer;","import React from 'react';\r\nimport CardsPageContainer from \"./CardsPageContainer\";\r\n\r\nconst CardsPage = () => {\r\n    return <>\r\n        <CardsPageContainer/>\r\n    </>\r\n}\r\n\r\nexport default CardsPage;","import React from 'react';\r\nimport {Redirect, Route, Switch} from 'react-router-dom'\r\nimport Error404 from './404/Error404';\r\nimport Test from './test/Test';\r\nimport RegisterPage from \"./registration/RegisterPage\";\r\nimport LoginContainer from \"./login/LoginContainer\";\r\nimport RestorePasswordPage from \"./restore-password/RestorePasswordPage\";\r\nimport {NewPasswordContainer} from \"./new-password/NewPasswordContainer\";\r\nimport {ProfileContainer} from './profile/ProfileContainer';\r\nimport {CardPacksPage} from './cardPacks/Ð¡ardPacksPage';\r\nimport CardsPage from \"./cards/CardsPage\";\r\n\r\nexport const PATH = {\r\n    LOGIN: '/login',\r\n    REGISTER: '/register',\r\n    PROFILE: '/profile',\r\n    ERROR: '/error',\r\n    RESTORE_PASSWORD: '/restore-password',\r\n    SET_NEW_PASSWORD: '/set-new-password',\r\n    CARDS: '/cards',\r\n    CARD_PACKS: '/card-packs',\r\n    TEST:'/test'\r\n\r\n}\r\n\r\nexport const Routes: React.FC = () => {\r\n    return (\r\n        <div>\r\n            <Switch>\r\n                <Route exact path='/' render={() => <Redirect to={'/login'}/>}/>\r\n                <Route path={PATH.LOGIN} render={() => <LoginContainer/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <RegisterPage/>}/>\r\n                <Route path={PATH.REGISTER} render={() => <RegisterPage/>}/>\r\n                <Route path={PATH.PROFILE} render={() => <ProfileContainer/>}/>\r\n                <Route path={PATH.RESTORE_PASSWORD} render={() => <RestorePasswordPage/>}/>\r\n                <Route path={PATH.CARD_PACKS} render={() => <CardPacksPage/>}/>\r\n                <Route path={PATH.SET_NEW_PASSWORD} render={() => <NewPasswordContainer/>}/>\r\n                <Route path={PATH.TEST} render={() => <Test/>}/>\r\n                <Route path={PATH.CARDS + \"/:cardPackID\"} render={() => <CardsPage/>}/>\r\n                <Route render={() => <Error404/>}/>\r\n\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Routes;\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport {PATH} from '../Routes';\r\nimport s from './Header.module.css';\r\n\r\nconst Header: React.FC = () => {\r\n    return (\r\n        <div className={s.headerContainer}>\r\n            <NavLink to={PATH.LOGIN}>Login</NavLink>\r\n            <NavLink to={PATH.REGISTER}>Register</NavLink>\r\n            <NavLink to={PATH.PROFILE}>Profile</NavLink>\r\n            <NavLink to={PATH.RESTORE_PASSWORD}>Restore Password</NavLink>\r\n            <NavLink to={PATH.SET_NEW_PASSWORD}>Set New Password</NavLink>\r\n            <NavLink to={PATH.CARD_PACKS}>Card Packs</NavLink>\r\n            <NavLink to={PATH.CARDS+\"/60c7b173761d1e00046a0914\"}>CARDS</NavLink>\r\n            <NavLink to={PATH.TEST}>Demo</NavLink>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Header;\r\n","import React from 'react';\r\nimport './App.css';\r\nimport Header from './header/Header';\r\nimport {HashRouter} from 'react-router-dom';\r\nimport Routes from './Routes';\r\n\r\nfunction App() {\r\n    return (\r\n        <HashRouter>\r\n            <div className={'App'}>\r\n                <Header/>\r\n                <Routes/>\r\n            </div>\r\n        </HashRouter>\r\n    )\r\n}\r\n\r\nexport default App;\r\n","import { ReportHandler } from 'web-vitals';\n\nconst reportWebVitals = (onPerfEntry?: ReportHandler) => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","const initialState = {};\r\nexport const testReducer = (state: any = initialState, action: any) => {\r\n    switch (action.type) {\r\n        case '': {\r\n            return state;\r\n        }\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n","import {applyMiddleware, combineReducers, createStore} from 'redux';\r\nimport {LoginActionsType, loginReducer} from './login-reducer';\r\nimport {registerReducer} from './register-reducer';\r\nimport {profileReducer} from './profile-reducer';\r\nimport {restorePasswordReducer} from './restore-password-reducer';\r\nimport {newPasswordReducer} from './new-password-reducer';\r\nimport {testReducer} from './test-reducer';\r\nimport thunk from 'redux-thunk';\r\nimport {appReducer} from './app-reducer';\r\nimport {packsReducer} from './cardPacks-reducer';\r\nimport cardsReducer from \"./cards-reducer\";\r\n\r\nconst rootReducer = combineReducers({\r\n    app: appReducer,\r\n    login: loginReducer,\r\n    register: registerReducer,\r\n    profile: profileReducer,\r\n    restorePassword: restorePasswordReducer,\r\n    newPassword: newPasswordReducer,\r\n    packs: packsReducer,\r\n    test: testReducer,\r\n    cards: cardsReducer,\r\n});\r\n\r\nexport const store = createStore(rootReducer, applyMiddleware(thunk));\r\n// @ts-ignore\r\nwindow.store = store;\r\n\r\nexport type AppRootStateType = ReturnType<typeof rootReducer>;\r\nexport type AppRootActionsType =\r\n    | LoginActionsType\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './c1-main/m1-ui/App';\nimport reportWebVitals from './reportWebVitals';\nimport {Provider} from 'react-redux';\nimport {store} from './c1-main/m2-bll/store';\n\nReactDOM.render(\n  <React.StrictMode>\n      <Provider store={store}>\n          <App />\n      </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"table\":\"CardsPage_table__3TAIv\",\"main\":\"CardsPage_main__3NIdv\",\"container\":\"CardsPage_container__3rnU7\",\"button\":\"CardsPage_button__21g0L\",\"addButton\":\"CardsPage_addButton__ocT3i\",\"search\":\"CardsPage_search__NhoTD\",\"packList\":\"CardsPage_packList__3DppQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"set\":\"NewPassword_set__1hXhM\",\"card\":\"NewPassword_card__2kGUu\",\"logo\":\"NewPassword_logo__2hSg8\",\"title\":\"NewPassword_title__4dKqr\",\"form\":\"NewPassword_form__3rso2\",\"error\":\"NewPassword_error__3b2o6\",\"text\":\"NewPassword_text__1LRlN\",\"button\":\"NewPassword_button__2GyWU\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"login\":\"Login_login__ZtAfM\",\"card\":\"Login_card__1uIw3\",\"logo\":\"Login_logo__1Y4QQ\",\"form\":\"Login_form__1DBfW\",\"error\":\"Login_error__1ho5P\",\"forgot\":\"Login_forgot__2fJvz\",\"loginBtn\":\"Login_loginBtn__1WMt6\",\"account\":\"Login_account__3tdiC\",\"reg\":\"Login_reg__23nCC\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"superInput\":\"InputText_superInput__2h3wO\",\"errorInput\":\"InputText_errorInput__3F9WG\",\"error\":\"InputText_error__2lDLV\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"default\":\"Button_default__3_qLI\",\"red\":\"Button_red__3mhUf\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"container\":\"CardPackagePage_container__3-yoB\",\"settings\":\"CardPackagePage_settings__2tFZ5\",\"packList\":\"CardPackagePage_packList__21jdy\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"checkbox\":\"Checkbox_checkbox__VqnP0\",\"spanClassName\":\"Checkbox_spanClassName__13gmc\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Profile_main__2Gve2\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"main\":\"Error404_main__1s_FQ\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"slider\":\"DoubleSlider_slider__38Y75\"};"],"sourceRoot":""}